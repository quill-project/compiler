
mod std

pub fun String::as_string(self: String) -> String = self

pub fun String::as_hash(self: String) -> Int = self
    |> codes()
    |> reduce(hash::combine_ord)
    |> unwrap_or(0)

pub fun String::join(from: mut Sequence[String], delim: String) -> String = from 
    |> reduce(|acc, curr| acc 
        |> concat(delim) 
        |> concat(curr)
    ) 
    |> unwrap_or("")

pub fun String::indices(self: String) -> mut Sequence[Int] 
    = range(0, self |> length())

pub fun String::indices_rep(self: String) -> mut Stream[Int] {
    if 0 == (self |> length()) {
        return panic("Attempt to get index stream from empty string!")
    }
    return count_from(0)
        |> map(|i| i % (self |> length()))
}

pub fun String::codes(self: String) -> mut Sequence[Int] = self
    |> chars()
    |> map(String::as_code)

pub fun String::codes_rep(self: String) -> mut Stream[Int] = self
    |> chars_rep()
    |> map(String::as_code)

pub fun String::get(self: String, position: Int) -> Option[String] {
    val l = self |> length()
    val p = if position >= 0 { position } else { position + l }
    return if p < 0 || p >= l { Option::None[String] }
        else { Option::Some(self |> slice(p, p + 1)) }
}

pub fun String::at(self: String, position: Int) -> String = self 
    |> get(position) 
    |> unwrap_or_else(|| panic("Position " 
        |> concat(position |> as_string())
        |> concat(" is out of bounds for a string of length ")
        |> concat(self |> length() |> as_string())
    ))

pub fun String::slice_from(self: String, start: Int) -> String
    = self |> slice(start, self |> length())

pub fun String::slice_to(self: String, end: Int) -> String
    = self |> slice(0, end)

pub fun String::starts_with(self: String, prefix: String) -> Bool {
    val pl = prefix |> length()
    if pl > (self |> length()) { return false }
    return prefix == (self |> slice_to(pl))
}

pub fun String::ends_with(self: String, suffix: String) -> Bool {
    val l = self |> length()
    val sl = suffix |> length()
    if l < sl { return false }
    return suffix == (self |> slice(l - sl, l))
}

pub fun String::find(self: String, sub: String) -> mut Sequence[Int] {
    val l = self |> length()
    val sl = sub |> length()
    if sl == 0 { return range_incl(0, l) }
    mut i = 0
    return Sequence::new(|| {
        i = range_incl(i, l - sl)
            |> find(|j| sub == (self |> slice(j, j + sl)))
            |> unwrap_or(l)
        if i >= l { return Option::None }
        val r = i
        i = i + sl
        return Option::Some(r)
    })
}

// Version of 'String::find' that also includes overlapping results
pub fun String::find_all(self: String, sub: String) -> mut Sequence[Int] {
    val l = self |> length()
    val sl = sub |> length()
    return range_incl(0, l - sl)
        |> filter(|i| sub == (self |> slice(i, i + sl)))
}

pub fun String::fmt(self: String, ...inserted: List[String]) -> String {
    val v = inserted |> values()
    val out = self
        |> split("_")
        |> reduce(|acc, e| acc
            |> concat(v |> next() |> unwrap_or("_"))
            |> concat(e)
        )
        |> unwrap_or("")
    if v |> next() |> is_none() { return out }
    return "The pattern '" 
        |> concat(self) 
        |> concat("' does not make use of all provided values (")
        |> concat(inserted |> length() |> as_string())
        |> concat(")!")
        |> panic()
}

pub fun String::repeat(self: String, n: Int) -> String 
    = Stream::of(self)
    |> take(n)
    |> reduce(String::concat)
    |> unwrap_or("")

pub fun String::repeat_to(self: String, n: Int) -> String {
    val l = self |> length()
    if l == 0 {
        return panic("Attempt to repeat an empty string until a certain length")
    }
    return self 
        |> repeat(n / l + 1)
        |> slice_to(n)
}

pub fun String::pad_begin(self: String, tgt_len: Int, padding: String) -> String {
    if tgt_len <= (self |> length()) { return self }
    if 0 == (padding |> length()) { return self }
    return padding
        |> repeat_to(tgt_len - (self |> length()))
        |> concat(self)
}

pub fun String::pad_end(self: String, tgt_len: Int, padding: String) -> String {
    if tgt_len <= (self |> length()) { return self }
    if 0 == (padding |> length()) { return self }
    val p = padding |> repeat_to(tgt_len - (self |> length()))
    return self |> concat(p)
}

pub fun String::split(self: String, delim: String) -> mut Sequence[String] {
    val l = self |> length()
    val dl = delim |> length()
    if dl == 0 {
        return panic("Attempt to split a string with an empty delimiter!")
    }
    val splits = self |> find(delim)
    mut anchor = 0
    return Sequence::new(|| {
        if anchor > l { return Option::None }
        val next = splits |> next() |> unwrap_or(l)
        val r = self |> slice(anchor, next)
        anchor = next + dl
        return Option::Some(r)
    })
}

pub fun String::replace(self: String, at: String, with: String) -> String
    = self |> split(at) |> join(with)