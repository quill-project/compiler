
mod std::Float

pub val FEPSILON = 0.00000000000000022204460492503131
pub val INF = 1.0 / 0.0
pub val NEG_INF = -INF
pub val NAN = 0.0 / 0.0

pub val E = 2.71828182845904523536028747135266250
pub val LN_10 = 2.30258509299404568401799145468436421
pub val LN_2 = 0.693147180559945309417232121458176568
pub val LOG10_E = 0.434294481903251827651128918916605082
pub val LOG2_E = 1.44269504088896340735992468100189214
pub val PI = 3.14159265358979323846264338327950288
pub val TAU = PI * 2.0
pub val SQRT_2 = 1.41421356237309504880168872420969808


mod std

pub fun Float::add(lhs: Float, rhs: Float) -> Float = lhs + rhs
pub fun Float::subtract(lhs: Float, rhs: Float) -> Float = lhs - rhs
pub fun Float::multiply(lhs: Float, rhs: Float) -> Float = lhs * rhs
pub fun Float::divide(lhs: Float, rhs: Float) -> Float = lhs / rhs
pub fun Float::modulo(lhs: Float, rhs: Float) -> Float = lhs % rhs
pub fun Float::negate(x: Float) -> Float = -x
pub fun Float::less_than(lhs: Float, rhs: Float) -> Bool = lhs < rhs
pub fun Float::greater_than(lhs: Float, rhs: Float) -> Bool = lhs > rhs
pub fun Float::less_than_eq(lhs: Float, rhs: Float) -> Bool = lhs <= rhs
pub fun Float::greater_than_eq(lhs: Float, rhs: Float) -> Bool = lhs >= rhs

pub fun Float::clone(self: Float) -> Float = self

pub fun Float::as_radians(self: Float) -> Float
    = self * Float::TAU / 360.0

pub fun Float::as_degrees(self: Float) -> Float
    = self * 360.0 / Float::TAU

pub fun Float::abs(self: Float) -> Float
    = if self < 0.0 { -self } else { self }

pub fun Float::max(a: Float, b: Float) -> Float
    = if a >= b { a } else { b }

pub fun Float::min(a: Float, b: Float) -> Float
    = if a <= b { a } else { b }

pub fun Float::clamp(self: Float, min: Float, max: Float) -> Float
    = if min > max { panic[Float]("Attempt to clamp to an invalid range") }
    else if self < min { min }
    else if self > max { max }
    else { self }

pub fun Float::sign(self: Float) -> Float
    = if self < 0.0 { -1.0 }
    else if self > 0.0 { 1.0 }
    else if self == 0.0 { 0.0 }
    else { Float::NAN }

pub fun Float::parse(from: String) -> Option[Float] {
    match from {
        "inf" { return Option::Some(Float::INF) }
        "-inf" { return Option::Some(-Float::INF) }
        "nan" | "-nan" { return Option::Some(Float::NAN) }
        _ {}
    }
    mut sign = 1.0
    mut int_start = 0
    match from |> get(0) {
        Some("+") { int_start = 1 }
        Some("-") {
            int_start = 1
            sign = -1.0
        }
        Some(_) {}
        None { return Option::None }
    }
    val fract_end = from |> indices()
        |> find(|i| {
            val c = from |> at(i)
            return c == "e" || c == "E"
        })
        |> unwrap_or(from |> length())
    val int_end = from |> slice_to(fract_end)
        |> find(".") |> next() |> unwrap_or(fract_end)
    mut int_val = 0
    if int_end - int_start > 0 {
        match Int::parse(from |> slice(int_start, int_end)) {
            Some(v) { int_val = v }
            None { return Option::None }
        }
    }
    val fract_start = int_end + 1
    val fract_val = range(0, fract_end - fract_start)
        |> fold(Option::Some(0.0), |a, i| a |> and_then(|acc| {
            val n = from |> at(fract_start + i) |> as_code()
            if n < 48 || 57 < n { return Option::None }
            val pos = 1.0 / Float::powi(10.0, i + 1)
            return Option::Some(acc + Int::as_float(n - 48) * pos)
        }))
    val exp_start = fract_end + 1
    val exp_len = from |> length() |> subtract(exp_start)
    return fract_val
        |> map[Float, Float](|f| sign * (Int::as_float(int_val) + f))
        |> and_then(|v| {
            if exp_len <= 0 { return Option::Some(v) }
            match Int::parse(from |> slice_from(exp_start)) {
                Some(e) { return Option::Some(v * Float::powi(10.0, e)) }
                None { return Option::None }
            }
        })
}