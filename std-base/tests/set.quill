
mod std::tests::set

use std::test::*

pub fun empty() {
    val s: Set[Int] = Set::empty()
    assert_eq(Set::size(s), 0)
}

pub fun of() {
    val primes: Set[Int] = Set::of(2, 3, 5, 7, 3, 5, 11)
    assert_eq(Set::size(primes), 5)
    assert_eq(Set::has(primes, 2), true)
    assert_eq(Set::has(primes, 3), true)
    assert_eq(Set::has(primes, 5), true)
    assert_eq(Set::has(primes, 7), true)
    assert_eq(Set::has(primes, 11), true)
}

pub fun collect() {
    val primes: Set[Int] = List::of(2, 3, 5, 7, 3, 5, 11)
        |> List::values()
        |> Set::collect()
    assert_eq(Set::size(primes), 5)
    assert_eq(Set::has(primes, 2), true)
    assert_eq(Set::has(primes, 3), true)
    assert_eq(Set::has(primes, 5), true)
    assert_eq(Set::has(primes, 7), true)
    assert_eq(Set::has(primes, 11), true)
}

pub fun set_load_factor() {
    val primes: Set[Int] = Set::empty()
    Set::set_capacity(primes, 4)
    Set::set_load_factor(primes, 0.5)
    assert_eq(Set::capacity(primes), 4)
    assert_eq(Set::load_factor(primes), 0.5)
    Set::add(primes, 2)
    Set::add(primes, 3)
    assert_eq(Set::capacity(primes), 4)
    assert_eq(Set::size(primes), 2)
    Set::add(primes, 5)
    assert_eq(Set::capacity(primes), 8)
    assert_eq(Set::size(primes), 3)
}

pub fun set_capacity() {
    val primes: Set[Int] = Set::empty()
    Set::set_capacity(primes, 4)
    assert_eq(Set::capacity(primes), 4)
    Set::add(primes, 2)
    Set::add(primes, 3)
    Set::add(primes, 5)
    assert_eq(Set::capacity(primes), 4)
    assert_eq(Set::size(primes), 3)
    Set::add(primes, 7)
    assert_eq(Set::capacity(primes), 8)
    assert_eq(Set::size(primes), 4)
    Map::set_capacity(primes, 4)
    assert_eq(Set::capacity(primes), 8)
    Map::set_capacity(primes, 20)
    assert_eq(Set::capacity(primes), 20)
}

pub fun add() {
    val cities: Set[String] = Set::empty()
    assert_eq(Set::add(cities, "Berlin"), true)
    assert_eq(Set::size(cities), 1)
    assert_eq(Set::has(cities, "Berlin"), true)
    assert_eq(Set::add(cities, "Dublin"), true)
    assert_eq(Set::size(cities), 2)
    assert_eq(Set::has(cities, "Dublin"), true)
    assert_eq(Set::add(cities, "Las Vegas"), true)
    assert_eq(Set::size(cities), 3)
    assert_eq(Set::has(cities, "Las Vegas"), true)
    assert_eq(Set::add(cities, "Berlin"), false)
    assert_eq(Set::size(cities), 3)
    assert_eq(Set::has(cities, "Berlin"), true)
    assert_eq(Set::add(cities, "London"), true)
    assert_eq(Set::size(cities), 4)
    assert_eq(Set::has(cities, "London"), true)
    assert_eq(Set::add(cities, "Dublin"), false)
    assert_eq(Set::size(cities), 4)
    assert_eq(Set::has(cities, "Dublin"), true)
}

pub fun as_string() {
    assert_eq(
        Set::as_string(Set::of("New York", "Paris", "Madrid", "Tokyo")),
        "Set(New York, Paris, Madrid, Tokyo)"
    )
    assert_eq(
        Set::as_string(Set::empty[Int]()),
        "Set()"
    )
}

pub fun as_hash() {
    assert_eq(
        Set::as_hash(Set::of("Moscow", "Warsaw", "Rome")),
        String::as_hash("Moscow")
            |> hash::combine(String::as_hash("Warsaw"))
            |> hash::combine(String::as_hash("Rome"))
    )
    assert_eq(
        Set::as_hash(Set::empty[Int]()), 
        Set::as_hash(Set::empty[String]())
    )
}