
mod std::io

pub ext fun println[T](value: T) = "
    console.log(value)
"


mod std::String

pub ext fun concat(low: String, high: String) -> String = "
    return low + high;
"
pub ext fun slice(self: String, start: Int, end: Int) -> String = "
    return self.substring(Number(start), Number(end));
"


mod std::List

pub fun of[T](...values: List[T]) -> List[T] = values



mod pets

pub struct Cat(name: String, hunger: Float)

pub fun Cat::feed(self: Cat) {
    self.hunger = 0.0
}


mod test

fun feed[T](self: T) {
    T::feed(self)
}

fun main() {
    val c = pets::Cat("Snowball", 5.0)
    feed(c)
    io::println(c.hunger)
}
