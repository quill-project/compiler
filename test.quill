
mod std::io

pub ext fun println[T](value: T) = "
    if(typeof value === 'object') { console.log('(object)'); }
	else if(typeof value === 'function') { console.log('(function)'); }
    else if(value === undefined) { console.log('unit'); }
    else { console.log('' + value); }
"


mod std::String

pub ext fun concat(low: String, high: String) -> String = "
    return low + high;
"
pub ext fun slice(self: String, start: Int, end: Int) -> String = "
    return self.substring(Number(start), Number(end));
"


mod foo

pub enum Option[T](Some: T, None)



mod balls

use foo::Option

pub fun unwrap_add[A, B, R](a: Option[A], fallback_a: A, b: Option[B], fallback_b: B) -> R
    = test::unwrap_or[A](a, fallback_a) + test::unwrap_or[B](b, fallback_b)



mod test

pub fun unwrap_or[T](self: foo::Option[T], fallback: T) -> T {
    match self {
        foo::Option::Some[T](value) { return value }
        foo::Option::None[T] { return fallback }
    }
}

fun main() {
    io::println[Int](balls::unwrap_add[Int, Int, Int](
        foo::Option::Some[Int](5), 10, foo::Option::None[Int], 20
    ))
}
