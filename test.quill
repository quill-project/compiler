
mod std::io

pub ext fun println[T](value: T) = "
    if(typeof value === 'object') { console.log('(object)'); }
	else if(typeof value === 'function') { console.log('(function)'); }
    else if(value === undefined) { console.log('unit'); }
    else { console.log('' + value); }
"


mod std::String

pub ext fun concat(low: String, high: String) -> String = "
    return low + high;
"
pub ext fun slice(self: String, start: Int, end: Int) -> String = "
    return self.substring(Number(start), Number(end));
"


mod test

enum Option[T](Some: T, None)

fun unwrap_or[T](self: Option[T], fallback: T) -> T {
    match self {
        Some(value) { return value }
        None { return fallback }
    }
}

fun main() {
    val x = Option::Some(25)
    val v = unwrap_or(x, 5)
    io::println(v)
}
