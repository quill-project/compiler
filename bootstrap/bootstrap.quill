
mod quill::bootstrap

use quill::*

pub struct SourceFile(file: String, content: String)

pub fun compile(source_files: List[SourceFile], main: String) -> String {
    val sources: Map[String, String] = source_files
        |> values()
        |> map[SourceFile, Pair[String, String]](|f| Pair(f.file, f.content))
        |> Map::collect()
    val messages: mut List[Message] = List::empty()
    // parse all source files
    val nodes: List[ast::UntypedNode] = source_files
        |> values()
        |> map[SourceFile, List[ast::UntypedNode]](|s| {
            val tokens: mut Stream[token::Token]
                = lexer::tokenize(s.file, s.content, messages)
            val parser = parser::Parser::from(tokens, messages)
            return parser::parse_file(parser)
        })
        |> reduce(List::concat)
        |> unwrap_or_else(List::empty)
    // build a symbol table and check all symbols
    val table = types::SymbolTable::from(nodes, messages)
    val unchecked: mut List[types::SymbolInstance] 
        = types::SymbolTable::base_instances(table)
    Stream::new[mut List[types::SymbolInstance]](|| unchecked)
        |> take_while(|q| (q |> length()) != 0)
        |> for_each(|q| {
            val i: types::SymbolInstance 
                = q |> pop() 
                |> expect("stream should've ended")
            types::SymbolTable::check_symbol(table, i, q, messages)
        })
    // report messages if has any
    if messages |> values() |> any(Message::is_error) {
        messages |> values() 
            |> map[Message, String](
                |m| m |> display(sources, true) |> concat("\n")
            ) 
            |> for_each(println)
        return ""
    }
    // emit code
    val output: String = codegen::c::emit(
        table, 
        main |> split("::") |> List::collect(), 
        messages
    )
    // report messages if has any
    if messages |> values() |> any(Message::is_error) {
        messages |> values() 
            |> map[Message, String](
                |m| m |> display(sources, true) |> concat("\n")
            ) 
            |> for_each(println)
        return ""
    }
    return output
}