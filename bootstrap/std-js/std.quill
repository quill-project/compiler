
mod std


ext fun raw_println(line: String) = "
    console.log(line);
"

ext fun raw_eprintln(line: String) = "
    console.error(line);
"

pub ext fun panic[T](reason: String) -> T = "
    Error.stackTraceLimit = 100;
    throw new Error(reason);
"


pub ext fun Float::as_string(self: Float) -> String = "
    if(Number.isFinite(self)) { return '' + self; }
    if(Number.isNaN(self)) { return 'nan'; }
    if(self === Infinity) { return 'inf'; }
    if(self === -Infinity) { return '-inf'; }
    return '<unable to display>';
"

pub ext fun Float::as_int(self: Float) -> Int = "
    return BigInt(Math.trunc(self));
"

pub ext fun Float::is_nan(self: Float) -> Bool = "return Number.isNaN(self);"
pub ext fun Float::is_infinite(self: Float) -> Bool = "return Number.isInfinite(self);"
pub ext fun Float::is_finite(self: Float) -> Bool = "return Number.isFinite(self);"
pub ext fun Float::acos(self: Float) -> Float = "return Math.acos(self);"
pub ext fun Float::acosh(self: Float) -> Float = "return Math.acosh(self);"
pub ext fun Float::asin(self: Float) -> Float = "return Math.asin(self);"
pub ext fun Float::asinh(self: Float) -> Float = "return Math.asinh(self);"
pub ext fun Float::atan(self: Float) -> Float = "return Math.atan(self);"
pub ext fun Float::atan2(x: Float, y: Float) -> Float = "return Math.atan2(x, y);"
pub ext fun Float::atanh(self: Float) -> Float = "return Math.atanh(self);"
pub ext fun Float::cbrt(self: Float) -> Float = "return Math.cbrt(self);"
pub ext fun Float::ceil(self: Float) -> Float = "return Math.ceil(self);"
pub ext fun Float::cos(self: Float) -> Float = "return Math.cos(self);"
pub ext fun Float::cosh(self: Float) -> Float = "return Math.cosh(self);"
pub ext fun Float::exp(self: Float) -> Float = "return Math.exp(self);"
pub ext fun Float::expm1(self: Float) -> Float = "return Math.expm1(self);"
pub ext fun Float::floor(self: Float) -> Float = "return Math.floor(self);"
pub ext fun Float::hypot(a: Float, b: Float) -> Float = "return Math.hypot(a, b);"
pub ext fun Float::log(self: Float) -> Float = "return Math.log(self);"
pub ext fun Float::log10(self: Float) -> Float = "return Math.log10(self);"
pub ext fun Float::log1p(self: Float) -> Float = "return Math.log1p(self);"
pub ext fun Float::log2(self: Float) -> Float = "return Math.log2(self);"
pub ext fun Float::powi(self: Float, n: Int) -> Float = "
    return Math.pow(self, Number(n));
"
pub ext fun Float::powf(self: Float, n: Float) -> Float = "
    return Math.pow(self, n);
"
pub ext fun Float::round(self: Float) -> Float = "return Math.round(self);"
pub ext fun Float::sin(self: Float) -> Float = "return Math.sin(self);"
pub ext fun Float::sinh(self: Float) -> Float = "return Math.sinh(self);"
pub ext fun Float::sqrt(self: Float) -> Float = "return Math.sqrt(self);"
pub ext fun Float::tan(self: Float) -> Float = "return Math.tan(self);"
pub ext fun Float::tanh(self: Float) -> Float = "return Math.tanh(self);"
pub ext fun Float::trunc(self: Float) -> Float = "return Math.trunc(self);"


pub ext fun Int::as_string(self: Int) -> String = "
    return '' + self;
"

pub ext fun Int::as_float(self: Int) -> Float = "
    return Number(self);
"


pub ext fun List::of_length[T](length: Int, value: T) -> mut List[T] = "
    return new Array(Number(length)).fill(value);
"

pub ext fun List::concat[T](low: List[T], high: List[T]) -> mut List[T] = "
    return [...low, ...high];
"

ext fun List::slice_unchecked[T](self: List[T], start: Int, end: Int) -> mut List[T] = "
    return self.slice(Number(start), Number(end));
"

ext fun List::insert_unchecked[T](self: mut List[T], position: Int, value: T) = "
    const n = Number(position);
    self.push(value);
    self.copyWithin(n + 1, n, self.length - 1);
    self[n] = value;
"

ext fun List::set_unchecked[T](self: mut List[T], position: Int, value: T) = "
    self[Number(position)] = value;
"

pub ext fun List::length[T](self: List[T]) -> Int = "
    return BigInt(self.length);
"

ext fun List::get_unchecked[T](self: List[T], position: Int) -> T = "
    return self[Number(position)]
"

ext fun List::splice_unchecked[T](self: mut List[T], start: Int, end: Int) -> mut List[T] = "
    return self.splice(Number(start), Number(end - start))
"


ext fun Sequence::for_each_until[T](self: mut Sequence[T], f: Fun(T), end: Option[T]) = "
    while(true) {
        const elem = self.next();
        if(elem.tag === end.tag) { return; }
        f(elem.value);
    }
"

pub fun Sequence::for_each[T](self: mut Sequence[T], f: Fun(T))
    = self |> for_each_until(f, Option::None)


ext fun String::slice_unchecked(self: String, start: Int, end: Int) -> String = "
    return self.slice(Number(start), Number(end));
"

ext fun String::slice_from_unchecked(self: String, start: Int) -> String = "
    return self.slice(Number(start), self.length);
"

pub ext fun String::concat(low: String, high: String) -> String = "
    return low + high;
"

pub ext fun String::length(self: String) -> Int = "
    return BigInt(self.length);
"

ext fun String::as_code_unchecked(self: String) -> Int = "
    if(self.length === 0) { return 0n; }
    return BigInt(self.codePointAt(0));
"

ext fun String::from_code_unchecked(code: Int) -> String = "
    return String.fromCodePoint(Number(code));
"

pub fun String::chars(self: String) -> mut Sequence[String] {
    mut r = self
    return Sequence::new(|| {
        val prev_l = r |> length()
        if prev_l == 0 { return Option::None }
        val char_l = if (r |> as_code()) > 65535 { 2 } else { 1 }
        val char = r |> slice(0, char_l)
        r = r |> slice(char_l, prev_l)
        return Option::Some(char)
    })
}

pub fun String::chars_rep(self: String) -> mut Stream[String] {
    if 0 == (self |> length()) {
        return panic("Attempt to get char stream from empty string!")
    }
    mut r = self
    return Stream::new(|| {
        val prev_l = r |> length()
        val char_l = if (r |> as_code()) > 65535 { 2 } else { 1 }
        val char = r |> slice(0, char_l)
        r = r |> slice(char_l, prev_l)
        if 0 == (r |> length()) { r = self }
        return char
    })
}


pub ext fun StringBuilder::empty() -> mut StringBuilder = "
    return { content: \"\" };
"

pub ext fun StringBuilder::set_capacity(self: mut StringBuilder, capacity: Int) = "
    // JS impl does not have a capacity
"

ext fun StringBuilder::insert_unchecked(self: mut StringBuilder, position: Int, value: String) = "
    self.content = self.content.substring(0, position)
        + value
        + self.content.substring(position);
"

pub ext fun StringBuilder::push(self: mut StringBuilder, value: String) = "
    self.content += value;
"

ext fun StringBuilder::as_string_ref(self: StringBuilder) -> String = "
    return self.content;
"

ext fun StringBuilder::splice_unchecked(self: mut StringBuilder, start: Int, end: Int) -> String = "
    const removed = self.content.substring(start, end);
    self.content = self.content.substring(0, start)
        + self.content.substring(end);
    return removed;
"

ext fun StringBuilder::splice_from_unchecked(self: mut StringBuilder, start: Int) -> String = "
    const removed = self.content.substring(start);
    self.content = self.content.substring(0, start);
    return removed;
"