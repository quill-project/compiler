
mod quill::cli

use quill::*

fun main() {
    val name = "example.quill"
    val content = "
mod quill::cli

use quill::*

fun main() {
    val name = \"example.quill\"
    val content = \"nice\"
    val files: Map[String, String] = Map::of(Map::Entry(name, content))
    val messages: mut List[Message] = List::empty()
    lexer::tokenize_all(name, content, messages)
        |> take_until(|t| t.type == lexer::TokenType::EndOfFile)
        |> for_each(println)
    messages |> values()
        |> map[Message, String](|m| m |> display(files))
        |> for_each(println)
}
    "
    val files: Map[String, String] = Map::of(Map::Entry(name, content))
    val messages: mut List[Message] = List::empty()
    lexer::tokenize_all(name, content, messages)
        |> take_until(|t| t.type == lexer::TokenType::EndOfFile)
        |> for_each(println)
    messages |> values()
        |> map[Message, String](|m| m |> display(files))
        |> for_each(println)
}
