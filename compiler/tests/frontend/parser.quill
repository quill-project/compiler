
mod quill::tests::parser

use std::test::*
use quill::*
use quill::token::Token
use quill::parser::Parser

fun assert_tree(
    f: Fun(mut Parser) -> ast::UntypedNode, content: String, expected: String
) {
    val messages: mut List[Message] = List::empty()
    val tokens: mut Stream[Token] 
        = lexer::tokenize("test.quill", content, messages)
    val parser: mut Parser = Parser::from(tokens, messages)
    val tree: ast::UntypedNode = f(parser)
    if messages |> values() |> any(Message::is_error) {
        val files = Map::of(Pair("test.quill", content))
        val msgs = messages 
            |> values() |> map[Message, String](|m| m |> display(files)) 
            |> join("\n\n")
        return "Parsing assertion failed:\n" |> concat(content)
            |> concat("\n\nLexer/Parser reported message(s):\n") |> concat(msgs)
            |> panic()
    }
    val output: String = tree |> ast::UntypedNode::as_string()
    if output == expected { return unit }
    return "Parsing assertion failed:\n" |> concat(content)
        |> concat("\n\nTest expected:\n") |> concat(expected)
        |> concat("\n\nParser returned:\n") |> concat(output)
        |> panic()
}

pub fun literals() {
    assert_tree(parser::parse_value, "5", "5")
    assert_tree(parser::parse_value, "true", "true")
    assert_tree(parser::parse_value, "unit", "unit")
    assert_tree(parser::parse_value, 
        "|a, b| a + b", 
        "|a, b| [] { return (a + b) }"
    )
    assert_tree(parser::parse_value, "hello::world", "hello::world")
    assert_tree(parser::parse_value, 
        "if x < 5 { 5 } else if x > 10 { 10 } else { x }", 
        "(if (x < 5) then 5 else (if (x > 10) then 10 else x))"
    )
    assert_tree(parser::parse_value, "println[String]", "println[type@String]")
}

pub fun unary() {
    assert_tree(parser::parse_value, "-5", "(- 5)")
    assert_tree(parser::parse_value, "!true", "(! true)")
}

pub fun binary() {
    val expression: Fun(mut Parser) -> ast::UntypedNode 
        = |p| parser::parse_expression(p, Int::MAX)
    
    assert_tree(expression, "5 + 5 * 10", "(5 + (5 * 10))")
    assert_tree(expression, "3 > -4", "(3 > (- 4))")
    assert_tree(expression, 
        "5 < 10 || 10 < 20", 
        "(if (5 < 10) then true else (10 < 20))"
    )
    assert_tree(expression, "add(5, 10)", "(add(5, 10))")
    assert_tree(expression, 
        "my_cat.name == \"Bob\"", 
        "((my_cat .name) == \"Bob\")"
    )
    assert_tree(expression, "0 >= x + 5", "(0 >= (x + 5))")
    assert_tree(expression, 
        "is_logged_in() && is_verified()", 
        "(if (is_logged_in()) then (is_verified()) else false)"
    )
    assert_tree(expression, "5 |> add(10)", "(5 |> add(10))")
}

pub fun types() {
    assert_tree(parser::parse_type, "Int", "type@Int")
    assert_tree(parser::parse_type, "mut Set[Int]", "type+mut@Set[type@Int]")
    assert_tree(parser::parse_type, 
        "Fun(Int, Int) -> Int",
        "(Fun(type@Int, type@Int) -> type@Int)"
    )
    assert_tree(parser::parse_type,
        "mut Map[Int, Option[mut Set[lexer::TokenType]]]",
        "type+mut@Map[type@Int, type@Option[type+mut@Set[type@lexer::TokenType]]]"
    )
    assert_tree(parser::parse_type,
        "mut Map[String, Fun(Float, Float) -> Float]",
        "type+mut@Map[type@String, (Fun(type@Float, type@Float) -> type@Float)]"
    )
}

pub fun variables() {
    assert_tree(parser::parse_statement, "val x = 5", "val x = 5")
    assert_tree(parser::parse_statement, "mut y = 10", "mut y = 10")
    assert_tree(parser::parse_statement, "val z: Int = 15", "val z: type@Int = 15")
    assert_tree(parser::parse_statement, "y = 5 + 10", "y = (5 + 10)")
}

pub fun control_flow() {
    assert_tree(parser::parse_statement, "return a + b", "return (a + b)")
    assert_tree(parser::parse_statement, 
        "if x < 5 { mut r = x   r = r + 5   return r } else { return x }", 
        "if (x < 5) { mut r = x; r = (r + 5); return r } else { return x }"
    )
    assert_tree(parser::parse_statement, 
        "if x < 5 { return 5 } else if x > 10 { return 10 } else { return x }", 
        "if (x < 5) { return 5 } else { if (x > 10) { return 10 } else { return x } }"
    )
    assert_tree(parser::parse_statement, 
        "while x < 5 { println(x)   x = x + 1 }", 
        "while (x < 5) { (println(x)); x = (x + 1) }"
    )
    assert_tree(parser::parse_statement, 
        "for n: range(0, 10) { if n == 5 { break }   println(x) }",
        "for n: (range(0, 10)) { if (n == 5) { break } else {  }; (println(x)) }"
    )
    assert_tree(parser::parse_statement,
        "match n { 0 { println(\"Hello\") } 1 { println(\"world\") } }",
        "match n { 0 () -> { (println(\"Hello\")) } 1 () -> { (println(\"world\")) } }"
    )
}

pub fun declarations() {
    assert_tree(parser::parse_declaration, 
        "mod std::Int",
        "mod std::Int"
    )
    assert_tree(parser::parse_declaration,
        "use quill::lexer::tokenize",
        "use(tokenize -> quill::lexer::tokenize)"
    )
    assert_tree(parser::parse_declaration,
        "use quill::token::(Token, TokenType::is_relevant as should_be_included)",
        "use(Token -> quill::token::Token, should_be_included -> quill::token::TokenType::is_relevant)"
    )
    assert_tree(parser::parse_declaration,
        "use quill::ast::*",
        "use(* -> quill::ast::*)"
    )
    assert_tree(parser::parse_declaration,
        "use quill::Message as Error",
        "use(Error -> quill::Message)"
    )
    assert_tree(parser::parse_declaration, 
        "pub val x: Int = 5", 
        "pub val x: type@Int = 5"
    )
    assert_tree(parser::parse_declaration, 
        "mut test::y: Int = 10", 
        "mut test::y: type@Int = 10"
    )
    assert_tree(parser::parse_declaration, 
        "mut z: Int = 15", 
        "mut z: type@Int = 15"
    )
    assert_tree(parser::parse_declaration, 
        "pub fun add[T](a: T, b: T) -> T = a + b", 
        "pub fun add[T](a: type@T, b: type@T) -> type@T { return (a + b) }"
    )
    assert_tree(parser::parse_declaration,
        "fun String::greet(self: String) { println(concat(\"Hello, \", self)) }",
        "fun String::greet[](self: type@String) { (println((concat(\"Hello, \", self)))) }"
    )
    assert_tree(parser::parse_declaration,
        "ext fun Int::as_float(self: Int) -> Float = \"return Number(self);\"",
        "ext fun Int::as_float[](self: type@Int) -> type@Float = \"return Number(self);\""
    )
    assert_tree(parser::parse_declaration,
        "struct pets::Cat(name: String, age: Int)",
        "struct pets::Cat[](name: type@String, age: type@Int)"
    )
    assert_tree(parser::parse_declaration,
        "pub struct Box[T](value: T)",
        "pub struct Box[T](value: type@T)"
    )
    assert_tree(parser::parse_declaration,
        "pub enum Option[T](Some: T, None)",
        "pub enum Option[T](Some: type@T, None: type@std::Unit)"
    )
}