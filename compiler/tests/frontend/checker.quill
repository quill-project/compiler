
mod quill::tests::checker

use std::test::*
use quill::*
use quill::types::*
use quill::tests::types::build_table

fun check_symbols(content: String) -> mut SymbolTable {
    val table: mut SymbolTable = build_table(content)
    val messages: mut List[Message] = List::empty()
    val queue: mut List[SymbolInstance] = table |> base_instances()
    Stream::new[mut List[SymbolInstance]](|| queue)
        |> take_while(|q| q |> length() |> is_not(0))
        |> for_each(|q| {
            val i: SymbolInstance = q |> pop() |> expect("stream ends on empty")
            table |> check_symbol(i, q, messages)
        })
    if messages |> values() |> any(Message::is_error) {
        val files = Map::of(Pair("test.quill", content))
        val msgs = messages 
            |> values() |> map[Message, String](|m| m |> display(files)) 
            |> join("\n\n")
        return "Checking assertion failed:\n" |> concat(content)
            |> concat("\n\nReported message(s):\n") |> concat(msgs)
            |> panic()
    }
    return table
}

fun assert_symbol(
    table: mut SymbolTable, content: String, path: String, t_args: List[Type], expected: String
) {
    val path_segs: List[String] = path 
        |> split("::") 
        |> List::collect()
    val messages: mut List[Message] = List::empty()
    val queue: mut List[SymbolInstance] 
        = List::of(SymbolInstance(path_segs, t_args))
    Stream::new[mut List[SymbolInstance]](|| queue)
        |> take_while(|q| q |> length() |> is_not(0))
        |> for_each(|q| {
            val i: SymbolInstance = q |> pop() |> expect("stream ends on empty")
            table |> check_symbol(i, q, messages)
        })
    if messages |> values() |> any(Message::is_error) {
        val files = Map::of(Pair("test.quill", content))
        val msgs = messages 
            |> values() |> map[Message, String](|m| m |> display(files)) 
            |> join("\n\n")
        return "Checking assertion failed:\n" |> concat(content)
            |> concat("\n\nReported message(s):\n") |> concat(msgs)
            |> panic()
    }
    val symbol: Symbol = table.symbols 
        |> get(path_segs) 
        |> unwrap_or_else(
            || panic("Checking assertion failed: '_' not found" |> fmt(path))
        )
    val instance: Pair[TypedNode, Int] = symbol.instances
        |> get(t_args)
        |> expect("instance was put in the queue earlier")
    val output: String = TypedNode::as_string(instance.first)
    if output != expected {
        val t_args_s = t_args |> values() |> map(Type::as_string) |> join(", ")
        return "Checking assertion failed ('_' for [_]):\n" 
            |> fmt(path, t_args_s) |> concat(content)
            |> concat("\n\nTest expected:\n") |> concat(expected)
            |> concat("\n\nChecker returned:\n") |> concat(output)
            |> panic()
    }
}

pub fun declarations() {
    val c = "
fun greet(thing: String) {}

mod container
pub struct Box[T](value: T)
fun display[T](self: Box[T]) {}

mod arithmetic
fun add[T](a: T, b: T) {}
fun incr(r: mut container::Box[Int]) {}
fun sum[T](of: std::List[T]) {}
    "
    val t = check_symbols(c)
    val s = Source("test.quill", 0, 0)
    assert_symbol(t, c, 
        "greet", List::empty(), 
        "fun greet[](thing: type@String (=String)) {  } (=Unit)"
    )
    assert_symbol(t, c, 
        "container::Box", List::of(Type(Variant::String, !IS_MUTABLE, s)), 
        "pub struct Box[T](value: type@T (=String)) (=Unit)"
    )
    assert_symbol(t, c, 
        "container::display", List::of(Type(Variant::String, !IS_MUTABLE, s)), 
        "fun display[T](self: type@container::Box[type@T (=String)] (=container::Box[String])) {  } (=Unit)"
    )
    assert_symbol(t, c, 
        "arithmetic::add", List::of(Type(Variant::Integer, !IS_MUTABLE, s)), 
        "fun add[T](a: type@T (=Int), b: type@T (=Int)) {  } (=Unit)"
    )
    assert_symbol(t, c, 
        "arithmetic::add", List::of(Type(Variant::Float, !IS_MUTABLE, s)), 
        "fun add[T](a: type@T (=Float), b: type@T (=Float)) {  } (=Unit)"
    )
    assert_symbol(t, c, 
        "arithmetic::incr", List::empty(), 
        "fun incr[](r: type+mut@container::Box[type@Int (=Int)] (=mut container::Box[Int])) {  } (=Unit)"
    )
    assert_symbol(t, c, 
        "arithmetic::sum", List::of(Type(Variant::Integer, !IS_MUTABLE, s)), 
        "fun sum[T](of: type@std::List[type@T (=Int)] (=List[Int])) {  } (=Unit)"
    )
}

pub fun numeric() {
    val c = "
pub val FIVE_PLUS_TEN: Int = 5 + 10

fun test() -> Float {
    if 0.5 < 10.0 { return -3.0 * 0.2 + 0.5 - 3.0 }
    return 2.5 + 2.0 / 0.5 % 3.0
}
    "
    val t = check_symbols(c)
    val s = Source("test.quill", 0, 0)
    assert_symbol(t, c, 
        "FIVE_PLUS_TEN", List::empty(), 
        "pub val FIVE_PLUS_TEN: type@Int (=Int) = (5 (=Int) + 10 (=Int)) (=Int) (=Unit)"
    )
    assert_symbol(t, c,
        "test", List::empty(),
        "fun test[]() -> type@Float (=Float) { \
if (0.5 (=Float) < 10 (=Float)) (=Bool) { \
return ((((- 3 (=Float)) (=Float) * 0.2 (=Float)) (=Float) + 0.5 (=Float)) (=Float) - 3 (=Float)) (=Float) (=Unit) \
} else {  } (=Unit); \
return (2.5 (=Float) + ((2 (=Float) / 0.5 (=Float)) (=Float) % 3 (=Float)) (=Float)) (=Float) (=Unit) \
} (=Unit)"
    )
}

pub fun structs() {
    val c = "
mod pet
pub struct Cat(name: String, hunger: Float)
pub val NO_HUNGER: Float = 0.0

pub fun feed(c: mut Cat) {
    c.hunger = NO_HUNGER
}

pub fun rebirth(c: mut Cat, name: String) {
    c.name = name
    c.hunger = NO_HUNGER
}

pub fun mate(a: Cat, b: Cat) -> mut Cat
    = Cat(\"unnamed\", (a.hunger + b.hunger) / 2.0)
    "
    val t = check_symbols(c)
    val s = Source("test.quill", 0, 0)
    assert_symbol(t, c, 
        "pet::Cat", List::empty(), 
        "pub struct Cat[](name: type@String (=String), hunger: type@Float (=Float)) (=Unit)"
    )
    assert_symbol(t, c,
        "pet::feed", List::empty(),
        "pub fun feed[](c: type+mut@pet::Cat (=mut pet::Cat)) { (var@c (=mut pet::Cat) .hunger) (=Float) = pet::NO_HUNGER (=Float) (=Unit) } (=Unit)"
    )
    assert_symbol(t, c,
        "pet::rebirth", List::empty(),
        "pub fun rebirth[](c: type+mut@pet::Cat (=mut pet::Cat), name: type@String (=String)) { \
(var@c (=mut pet::Cat) .name) (=String) = var@name (=String) (=Unit); \
(var@c (=mut pet::Cat) .hunger) (=Float) = pet::NO_HUNGER (=Float) (=Unit) \
} (=Unit)"
    )
    assert_symbol(t, c,
        "pet::mate", List::empty(),
        "pub fun mate[](a: type@pet::Cat (=pet::Cat), b: type@pet::Cat (=pet::Cat)) -> type+mut@pet::Cat (=mut pet::Cat) { \
return (struct@pet::Cat(\"unnamed\" (=String), (((var@a (=pet::Cat) .hunger) (=Float) + (var@b (=pet::Cat) .hunger) (=Float)) (=Float) / 2 (=Float)) (=Float))) (=mut pet::Cat) (=Unit) \
} (=Unit)"
    )
}

pub fun generics() {
    val c = "
mod std
pub ext fun Int::as_float(self: Int) -> Float = \"\"
pub ext fun Float::as_string(self: Float) -> String = \"\"
pub ext fun sum[T](...values: List[T]) -> T = \"\"

pub struct Box[T](value: T)
pub enum Option[T](Some: T, None)
pub fun pipeline[A, B, C](
    start: A,
    f_a_b: Fun(A) -> B,
    f_b_c: Fun(B) -> C
) -> C = f_b_c(f_a_b(start))

mod test
fun boxing() {
    val a = Box(5)
    val b: Box[Float] = Box(10.0)
    val c = Box[Bool](true)
}

fun options() {
    val a = Option::Some(25)
    val b: Option[Float] = Option::Some(13.1)
    val c = Option::Some[Bool](false)
    val d: Option[String] = Option::None
    val e = Option::None[Unit]
}

fun fun_stuff() {
    val r = pipeline(
        5,
        |n| n |> as_float(),
        |x| x |> as_string()
    )
}

fun varargs() {
    val a = sum(1, 2, 3)
    val b = sum(1.0, 2.0, 3.0)
}
    "
    val t = check_symbols(c)
    val s = Source("test.quill", 0, 0)
    assert_symbol(t, c,
        "test::boxing", List::empty(),
        "fun boxing[]() { \
val a = (struct@std::Box(5 (=Int))) (=mut std::Box[Int]) (=Unit); \
val b: type@std::Box[type@std::Float (=Float)] (=std::Box[Float]) = (struct@std::Box(10 (=Float))) (=mut std::Box[Float]) (=Unit); \
val c = (struct@std::Box[type@Bool (=Bool)](true (=Bool))) (=mut std::Box[Bool]) (=Unit) \
} (=Unit)"
    )
    assert_symbol(t, c,
        "test::options", List::empty(),
        "fun options[]() { \
val a = (enum@std::Option::Some(25 (=Int))) (=std::Option[Int]) (=Unit); \
val b: type@std::Option[type@std::Float (=Float)] (=std::Option[Float]) = (enum@std::Option::Some(13.1 (=Float))) (=std::Option[Float]) (=Unit); \
val c = (enum@std::Option::Some[type@Bool (=Bool)](false (=Bool))) (=std::Option[Bool]) (=Unit); \
val d: type@std::Option[type@String (=String)] (=std::Option[String]) = (enum@std::Option::None(unit (=Unit))) (=std::Option[String]) (=Unit); \
val e = (enum@std::Option::None[type@Unit (=Unit)](unit (=Unit))) (=std::Option[Unit]) (=Unit) \
} (=Unit)"
    )
    assert_symbol(t, c,
        "test::fun_stuff", List::empty(),
        "fun fun_stuff[]() { \
val r = (fun@std::pipeline(\
5 (=Int), \
|n| { return (fun@std::Int::as_float(var@n (=Int))) (=Float) (=Unit) } (=Fun(Int) -> Float), \
|x| { return (fun@std::Float::as_string(var@x (=Float))) (=String) (=Unit) \
} (=Fun(Float) -> String))) (=String) (=Unit) \
} (=Unit)"
    )
    assert_symbol(t, c,
        "test::varargs", List::empty(),
        "fun varargs[]() { \
val a = (fun@std::sum(1 (=Int), 2 (=Int), 3 (=Int))) (=Int) (=Unit); \
val b = (fun@std::sum(1 (=Float), 2 (=Float), 3 (=Float))) (=Float) (=Unit) \
} (=Unit)"
    )
}