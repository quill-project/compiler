
mod quill::checker

use quill::*
use quill::types::*
use quill::ast::UntypedNode

pub struct PatternTuple(
    path: List[String], t_args: List[Type],
    vals: List[Pattern]
)

pub enum Pattern(
    Any,
    Wildcard: Type,
    Unit,
    Bool: Bool,
    Tuple: PatternTuple,
    Tag: Pair[String, Pattern]
)

pub fun Pattern::as_hash(self: Pattern) -> Int {
    match self {
        Any { return 0 }
        Wildcard(t) { return t |> as_hash() |> hash::combine_ord(1) }
        Unit { return 2 }
        Bool(v) { return v |> as_hash() |> hash::combine_ord(3) }
        Tuple(PatternTuple(_, _, v)) { 
            return v |> as_hash() 
                |> hash::combine_ord(4) 
        }
        Tag(Pair(n, v)) { 
            return n |> as_hash()
                |> hash::combine_ord(v |> as_hash())
                |> hash::combine_ord(5)
        }
    }
}

pub fun Pattern::as_string(self: Pattern) -> String {
    match self {
        Any | Wildcard(_) { return "_" } 
        Unit { return "unit" }
        Bool(v) { return v |> as_string() }
        Tuple(PatternTuple(p, _, v)) {
            val path: String = p |> values() |> join("::")
            val vals: String = v |> values() |> map(Pattern::as_string) |> join(", ")
            return "_(_)" |> fmt(path, vals)
        }
        Tag(Pair(n, v)) { return "_(_)" |> fmt(n, v |> as_string()) }
    }
}

// Constructs a pattern from a given typed AST node.
pub fun Pattern::from(node: TypedNode, p: ast::MatchPattern[TypedNode]) -> Pattern {
    match node.value {
        VariableRef(name) { 
            val captured: Bool = name == "_" || (
                p.captures |> values() |> any(|c| c.name == Option::Some(name))
            )
            return if captured { Pattern::Wildcard(node.type) } 
                else { Pattern::Any }
        }
        Bool(v) { return Pattern::Bool(v) }
        Unit { return Pattern::Unit }
        StructInit(ast::PathInvocation(_, args, _)) {
            match node.type.value {
                Struct(Pair(path, t_args)) {
                    val v: List[Pattern] = args 
                        |> values()
                        |> map[TypedNode, Pattern](|arg| Pattern::from(arg, p)) 
                        |> List::collect()
                    return Pattern::Tuple(PatternTuple(path, t_args, v))
                }
                Invalid { return Pattern::Wildcard(node.type) }
                _ { return Pattern::Any }
            }
        }
        EnumInit(ast::PathInvocation(path, args, _)) {
            val n: String = path |> at(-1)
            val v: Pattern = args 
                |> get(0)
                |> map[TypedNode, Pattern](|arg| Pattern::from(arg, p))
                |> unwrap_or(Pattern::Any)
            return Pattern::Tag(Pair(n, v))
        }
        _ { return Pattern::Any }
    }
}

// Checks if the given patterns overlap.
pub fun Pattern::overlap(p: Pattern, q: Pattern, ctx: Checker) -> Bool
    = Pattern::subtract(p, q, ctx) != List::of(p)

// Internal helper to instantiate the given symbol and return its member types.
fun member_types_of(path: List[String], t_args: List[Type], ctx: Checker) -> Option[List[Pair[String, Type]]]
    = ctx.symbols.symbols |> get(path)
    |> and_then[Symbol, List[Pair[String, Type]]](|s| { match s.node.value {
        Structure(ast::CustomType(_, _, t_arg_n, members)) |
        Enumeration(ast::CustomType(_, _, t_arg_n, members)) {
            val decl_ctx = Checker(
                List::empty(),
                make_full_t_args(t_args, t_arg_n, s.node.source),
                ctx.symbols, s.context, 
                ctx.dependencies, List::empty()
            )
            val mems: List[Pair[String, Type]] 
                = members |> values()
                |> map[Pair[String, UntypedNode], Pair[String, Type]](
                    |m| Pair(m.first, (decl_ctx |> check_annotation(m.second)).type) 
                )
                |> List::collect()
            return Option::Some(mems)
        }
        _ { return Option::None }
    } })

// Creates a list of possible combinations when subtracting the tuple
// with values 'q.vals' from the tuple with values 'p.vals'.
fun subtract_tuple(
    p: PatternTuple, q: PatternTuple, ctx: Checker
) -> List[Pattern] {
    if p.path != q.path || p.t_args != q.t_args { 
        return List::of(Pattern::Tuple(p)) 
    }
    val p_c: Int = p.vals |> length()
    val q_c: Int = q.vals |> length()
    val c: Int = Int::max(p_c, q_c)
    val p_at: Fun(Int) -> Pattern 
        = |i| p.vals |> get(i) |> unwrap_or(Pattern::Any)
    val q_at: Fun(Int) -> Pattern 
        = |i| q.vals |> get(i) |> unwrap_or(Pattern::Any)
    val struct_members: List[Pair[String, Type]] 
        = member_types_of(p.path, p.t_args, ctx)
        |> expect("PatternTuple must contain valid struct ref")
    return range(0, c)
        |> fold(List::empty[Pattern](), |acc, i| {
            val added: List[Pattern]
                = Pattern::subtract(p_at(i), q_at(i), ctx) 
                |> values()
                |> map[Pattern, Pattern](|alt| {
                    val tuple: mut List[Pattern] = q.vals |> slice_to(i)
                    tuple |> push(alt)
                    range(i + 1, c) |> for_each(|j| {
                        val t: Type = (struct_members |> at(j)).second
                        tuple |> push(Pattern::Wildcard(t))
                    })
                    return Pattern::Tuple(PatternTuple(p.path, p.t_args, tuple))
                })
                |> List::collect()
            return List::concat(acc, added)
        })
}

// Subtracts the given pattern 'q' from the given pattern 'p'.
pub fun Pattern::subtract(p: Pattern, q: Pattern, ctx: Checker) -> List[Pattern] {
    match Pair(p, q) {
        // subtracting a wildcard ALWAYS results in nothing
        Pair(_, Pattern::Wildcard(_)) { return List::empty() }

        // 'Any' means we don't know the value -> cannot subtract anything
        Pair(_, Pattern::Any) |
        Pair(Pattern::Any, _) { return List::of(p) }

        // values
        Pair(Pattern::Wildcard(_), Pattern::Unit) |
        Pair(Pattern::Unit, Pattern::Unit) { 
            return List::empty() 
        }
        Pair(Pattern::Wildcard(_), Pattern::Bool(true)) { 
            return List::of(Pattern::Bool(false)) 
        }
        Pair(Pattern::Wildcard(_), Pattern::Bool(false)) { 
            return List::of(Pattern::Bool(true)) 
        }
        Pair(Pattern::Bool(true), Pattern::Bool(true)) |
        Pair(Pattern::Bool(false), Pattern::Bool(false)) {
            return List::empty()
        }

        // structs
        Pair(Pattern::Wildcard(_), Pattern::Tuple(q_tuple)) {
            val struct_members: List[Pair[String, Type]] 
                = member_types_of(q_tuple.path, q_tuple.t_args, ctx)
                |> expect("PatternTuple must contain valid struct ref")
            val p_vals: List[Pattern] = struct_members
                |> values()
                |> map[Pair[String, Type], Pattern](
                    |m| Pattern::Wildcard(m.second)
                )
                |> List::collect()
            val p_tuple: PatternTuple
                = PatternTuple(q_tuple.path, q_tuple.t_args, p_vals)
            return subtract_tuple(p_tuple, q_tuple, ctx)
        }
        Pair(Pattern::Tuple(p_tuple), Pattern::Tuple(q_tuple)) {
            return subtract_tuple(p_tuple, q_tuple, ctx)
        }

        // enums
        Pair(Pattern::Wildcard(t), Pattern::Tag(Pair(q_name, q_val))) {
            match t.value {
                Enum(Pair(path, t_args)) {
                    val enum_members: List[Pair[String, Type]] 
                        = member_types_of(path, t_args, ctx)
                        |> expect("Type must contain valid enum ref")
                    val other_vals: List[Pattern] = enum_members
                        |> values()
                        |> filter(|m| m.first != q_name)
                        |> map[Pair[String, Type], Pattern](|m| Pattern::Tag(
                            Pair(m.first, Pattern::Wildcard(m.second))
                        ))
                        |> List::collect()
                    val sub_vals: List[Pattern] = enum_members
                        |> values()
                        |> find(|m| m.first == q_name)
                        |> map[Pair[String, Type], List[Pattern]](
                            |m| Pattern::Wildcard(m.second)
                                |> Pattern::subtract(q_val, ctx)
                        )
                        |> unwrap_or(List::empty())
                        |> values()
                        |> map(|p| Pattern::Tag(Pair(q_name, p)))
                        |> List::collect()
                    return List::concat(other_vals, sub_vals)
                }
                Invalid { return List::empty() }
                _ {}
            }
        }
        Pair(Pattern::Tag(Pair(p_name, p_val)), Pattern::Tag(Pair(q_name, q_val))) {
            if p_name != q_name { return List::of(p) }
            return Pattern::subtract(p_val, q_val, ctx)
                |> values()
                |> map[Pattern, Pattern](|sub| Pattern::Tag(Pair(p_name, sub)))
                |> List::collect()
        }

        _ {}
    }
    // fallback
    return List::of(p)
}

// Given a list of patterns, this function returns a new list containing
// each pattern from the original list at most once.
pub fun deduplicate_patterns(long: List[Pattern]) -> List[Pattern]
    = long 
    |> values()
    |> map[Pattern, Pair[String, Pattern]](|p| Pair(Pattern::as_string(p), p))
    |> Map::collect()
    |> values()
    |> List::collect()

// Given a type, a list of branches and a checker, this function determines
// whether all possible values of the given type are handled.
// This function will generate a warning if not all possible values are handled.
pub fun Checker::is_exhaustive(
    self: mut Checker, t: Type, branches: List[ast::MatchBranch[TypedNode]],
    statement_src: Source
) -> Bool {
    val start: List[Pattern] = List::of(Pattern::Wildcard(t))
    val subtract_pattern: Fun(List[Pattern], ast::MatchPattern[TypedNode]) -> List[Pattern]
    = |unchecked, pattern| {
        val p = Pattern::from(pattern.node, pattern)
        return unchecked 
            |> values() 
            |> map[Pattern, List[Pattern]](|u| Pattern::subtract(u, p, self))
            |> reduce(List::concat)
            |> unwrap_or(List::empty())
            |> deduplicate_patterns()
    }
    val subtract_branch: Fun(List[Pattern], ast::MatchBranch[TypedNode]) -> List[Pattern]
    = |unchecked, branch| branch.patterns 
        |> values() 
        |> fold(unchecked, subtract_pattern)
    val unchecked: List[Pattern] = branches 
        |> values() 
        |> fold(start, subtract_branch)
    val exhaustive: Bool = unchecked |> length() |> is(0)
    if !exhaustive {
        self.messages |> push(
            Message::unmatched_values(unchecked, statement_src)
        )
    }
    return exhaustive
}