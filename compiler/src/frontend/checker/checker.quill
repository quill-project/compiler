
mod quill::checker

use quill::*
use quill::types::*
use quill::ast::UntypedNode

pub enum ScopeExit(
    None,
    Loop,
    Function
)

pub fun ScopeExit::eq(lhs: ScopeExit, rhs: ScopeExit) -> Bool
    = ScopeExit::level(lhs) == ScopeExit::level(rhs)

pub fun ScopeExit::not_eq(lhs: ScopeExit, rhs: ScopeExit) -> Bool
    = ScopeExit::level(lhs) != ScopeExit::level(rhs)

// Returns a score that represents the level of the given scope, representing
// a hierarchy.
pub fun ScopeExit::level(self: ScopeExit) -> Int {
    match self {
        None { return 0 }
        Loop { return 1 }
        Function { return 2 }
    }
}

// Returns the largest scope that includes both of the given scopes.
pub fun ScopeExit::combine(a: ScopeExit, b: ScopeExit) -> ScopeExit {
    match Int::min(a |> level(), b |> level()) {
        2 { return ScopeExit::Function }
        1 { return ScopeExit::Loop }
        0 { return ScopeExit::None }
        _ { return panic("Unhandled level!") }
    }
}

pub struct Variable(
    source: Source,
    mutable: Bool,
    used: Bool,
    type: Type,
    captured: mut Box[Bool]
)

pub val IS_USED: Bool = true
pub val IS_CAPTURED: Bool = true

pub struct Scope(
    locals: mut Map[String, mut Variable]
)

pub struct Function(
    scopes: mut List[Scope],
    captures: mut Map[String, Type],
    return_type: Option[Type]
)

pub struct Checker(
    functions: mut List[mut Function],
    type_args: mut Map[String, Type],
    symbols: SymbolTable,
    context: ModuleContext,
    dependencies: mut List[SymbolInstance],
    messages: mut List[Message]
)

// Modifies the checker state to enter a new, empty scope 
// in the current function.
pub fun Checker::enter_scope(self: mut Checker) {
    val function: mut Function = self.functions |> at(-1)
    val scope: Scope = Scope(Map::empty())
    function.scopes |> push(scope)
}

// Returns a reference to the current scope of the given checker state.
pub fun Checker::scope(self: mut Checker) -> Scope {
    val function: mut Function = self.functions |> at(-1)
    return function.scopes |> at(-1)
}

// Returns the most recently defined local variable with the given name
// available to the current scopes in the given checker state.
// For every function on the stack (from most inner to outer), it attempts
// to find the variable in the most inner scope to the most outer scope.
pub fun Checker::find_variable(
    self: mut Checker, name: String
) -> Option[mut Variable] {
    val scope_has: Fun(Scope) -> Bool = |s| s.locals |> has(name)
    return self.functions 
        |> indices_rev() 
        |> find(
            |func_i| (self.functions |> at(func_i)).scopes 
            |> reversed() 
            |> any(scope_has)
        )
        |> and_then[Int, Pair[Int, mut Variable]](
            |func_i| (self.functions |> at(func_i)).scopes 
            |> reversed() 
            |> find(scope_has)
            |> map[Scope, Pair[Int, mut Variable]](|scope| Pair(
                func_i, 
                scope.locals |> get(name) 
                    |> expect("scope was selected to have the var above")
            ))
        )
        |> map[Pair[Int, mut Variable], mut Variable](|ctx| {
            // if the function the variable was defined in ('ctx.first')
            // is not the current function ('curr_func_i'), mark it as having
            // been captured
            val curr_func_i: Int = (self.functions |> length()) - 1
            if ctx.first != curr_func_i {
                ctx.second.captured.value = IS_CAPTURED
            }
            // for every function inside the one that defines the variable
            // ('ctx.first') up to (including) the current function 
            // ('curr_func_i'), specify that it captures that variable.
            range_incl(ctx.first + 1, curr_func_i) |> for_each(|f_i| {
                val c_f: mut Function = self.functions |> at(f_i)
                c_f.captures |> set(name, ctx.second.type)
            })
            // return the found variable
            return ctx.second
        })
}

// Pops the most recent scope of the current function from the checker state.
// Additionally, warning messages are generated for any local variables in the
// popped scope which have not been marked as used.
pub fun Checker::exit_scope(self: mut Checker) {
    val function: mut Function = self.functions |> at(-1)
    val scope: Scope = function.scopes 
        |> pop() 
        |> expect("caller should ensure checker is in scope")
    scope.locals 
        |> entries()
        |> filter(|local| !local.second.used)
        |> for_each(|local| {
            self.messages |> push(
                Message::dead_local(local.first, local.second.source)
            )
        })
}

// Attempts to combine the given types using 'Type::join'.
// If successful, the resulting type is returned.
// Otherwise an error message is generated and an invalid type is returned.
pub fun Checker::join_types(
    self: mut Checker, a: Type, b: Type, at: Source
) -> Type {
    match Type::join(a, b) {
        Some(t) { return t }
        None {
            self.messages |> push(Message::incompatible_types(a, b, at))
            return Type(Variant::Invalid, !IS_MUTABLE, at)
        }
    }
}

// Attempts to expand the path to an absolute path.
// If in a module you have written `use foo::bar` and you pass 'bar',
// this function will expand it to 'foo::bar'.
// If the path starts with a generic type name, it will be replaced with
// the full path of the type provided for that generic type parameter.
// If there is no way to expand it, the original path will be returned.
pub fun Checker::expand_path(
    self: Checker, short: List[String]
) -> List[String] {
    if 0 == (short |> length()) { return short }
    val start: String = short |> at(0)
    val after: List[String] = short |> slice_from(1)
    val alias: Fun() -> Option[List[String]] = || self.context.aliases
        |> get(start) 
        |> map[List[String], List[String]](|repl| List::concat(repl, after))
    val generic: Fun() -> Option[List[String]] = || self.type_args
        |> get(start)
        |> map[Type, List[String]](|t| Type::as_path(t) |> concat(after))
    return generic() 
        |> or_else(alias) 
        |> unwrap_or(short)
}