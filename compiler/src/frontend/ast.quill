
mod quill::ast

use quill::*

pub struct UntypedNode(value: Variant[UntypedNode], source: Source)

pub fun UntypedNode::as_string(self: UntypedNode) -> String 
    = self.value |> as_string()


pub struct FunctionType[N](args: List[N], ret: Option[N])

pub struct PathRef[N](path: List[String], t_args: Option[List[N]])
pub struct Closure[N](
    args: List[String], args_captured: List[Box[Bool]],
    captures: Map[String, types::Type], body: List[N]
)

pub struct Invocation[N](invoked: N, args: List[N])
pub struct PathInvocation[N](path: List[String], args: List[N], t_args: Option[List[N]])
pub struct IfExpr[N](cond: N, if_val: N, else_val: N)

pub struct LocalVariable[N](
    name: String, mutable: Bool, captured: Box[Bool],
    type: Option[N], value: N
)
pub struct If[N](cond: N, if_body: List[N], else_body: List[N])
pub struct While[N](cond: N, body: List[N])
pub struct For[N](name: String, captured: Box[Bool], in: N, body: List[N])
pub struct Match[N](matched: N, branches: List[MatchBranch[N]])
pub struct MatchBranch[N](
    patterns: List[MatchPattern[N]],
    captures: Map[String, Pair[types::Type, Box[Bool]]],
    body: List[N]
)
pub struct MatchPattern[N](
    node: N,
    captures: mut List[PatternCapture],
    conditions: mut List[Pair[List[PatternLoc], PatternCond[N]]]
)
pub enum PatternLoc(
    StructMember: Pair[String, types::SymbolInstance],
    EnumMember: Pair[String, types::SymbolInstance]
)
pub enum PatternCond[N](
    EnumVariant: Pair[String, types::SymbolInstance],
    Value: Pair[types::SymbolInstance, N]
)
pub struct PatternCapture(
    name: Option[String], path: List[PatternLoc], type: types::Type
)

pub struct GlobalVariable[N](
    path: List[String], public: Bool, mutable: Bool, type: N, value: N,
    var_deps: List[List[String]]
)
pub struct Function[N](
    path: List[String], public: Bool,
    t_args: List[String], args: List[Pair[String, N]], varargs: Bool,
    args_captured: List[Box[Bool]],
    return_type: Option[N],
    body: List[N]    
)
pub struct ExternalFunction[N](
    path: List[String], public: Bool,
    t_args: List[String], args: List[Pair[String, N]], varargs: Bool,
    return_type: Option[N],
    body: String
)
pub struct CustomType[N](
    path: List[String], public: Bool,
    t_args: List[String], members: List[Pair[String, N]]
)

pub enum Variant[N](
    TypeRef: Pair[Bool, PathRef[N]],
    FunctionType: FunctionType[N],

    PathRef: PathRef[N],
    VariableRef: String,
    Int: Int,
    Float: Float,
    Bool: Bool,
    Unit,
    String: String,
    Closure: Closure[N],

    Add: Pair[N, N],
    Subtract: Pair[N, N],
    Multiply: Pair[N, N],
    Divide: Pair[N, N],
    Remainder: Pair[N, N],
    LessThan: Pair[N, N],
    GreaterThan: Pair[N, N],
    LessThanEqual: Pair[N, N],
    GreaterThanEqual: Pair[N, N],
    Equal: Pair[N, N],
    NotEqual: Pair[N, N],
    Negate: N,
    Not: N,
    Member: Pair[N, String],
    Call: Invocation[N],
    PipedCall: Invocation[N],
    NamedCall: PathInvocation[N],
    StructInit: PathInvocation[N],
    EnumInit: PathInvocation[N],
    IfExpr: IfExpr[N],

    LocalVariable: LocalVariable[N],
    Assignment: Pair[N, N],
    Return: N,
    Continue,
    Break,
    If: If[N],
    While: While[N],
    For: For[N],
    Match: Match[N],

    Module: List[String],
    Usages: List[Pair[String, List[String]]],
    GlobalVariable: GlobalVariable[N],
    Function: Function[N],
    ExternalFunction: ExternalFunction[N],
    Structure: CustomType[N],
    Enumeration: CustomType[N],

    Invalid
)

pub fun PathRef::as_string[N](self: PathRef[N]) -> String {
    val t_args_s = self.t_args
        |> map[List[N], String](|t| {
            val a = t |> values() |> map(N::as_string) |> join(", ")
            return "[" |> concat(a) |> concat("]")
        })
        |> unwrap_or("")
    return self.path |> values() |> join("::") |> concat(t_args_s)
}

pub fun PathInvocation::as_string[N](self: PathInvocation[N]) -> String {
    val path_s = self.path |> values() |> join("::")
    val args_s = self.args |> values() |> map(N::as_string) |> join(", ")
    val t_args_s = self.t_args
        |> map[List[N], String](|t| {
            val a = t |> values() |> map(N::as_string) |> join(", ")
            return "[" |> concat(a) |> concat("]")
        })
        |> unwrap_or("")
    return path_s |> concat(t_args_s) 
        |> concat("(") |> concat(args_s) |> concat(")")
}

pub fun MatchBranch::as_string[N](self: MatchBranch[N]) -> String
    = "_ (_) -> { _ }" |> fmt(
        self.patterns 
            |> values() 
            |> map[MatchPattern[N], String](|p| N::as_string(p.node)) 
            |> join(" | "),
        self.captures
            |> entries() 
            |> map[Pair[String, Pair[types::Type, Box[Bool]]], String](
                |e| "_: __" |> fmt(
                    e.first, 
                    types::Type::as_string(e.second.first),
                    if e.second.second.value { " (captured)" } else { "" }
                )
            )
            |> join(", "),
        self.body 
            |> values() 
            |> map(N::as_string) 
            |> join("; ")
    )


pub fun Variant::as_string[N](self: Variant[N]) -> String {
    match self {
        Variant::TypeRef(Pair(mutable, ref)) {
            return "type"
                |> concat(if mutable { "+mut" } else { "" })
                |> concat("@")
                |> concat(PathRef::as_string(ref))
        }
        Variant::FunctionType(FunctionType(args, ret)) { 
            return "(Fun("
                |> concat(args |> values() |> map(N::as_string) |> join(", "))
                |> concat(")")
                |> concat(ret 
                    |> map[N, String](|n| " -> " |> concat(N::as_string(n))) 
                    |> unwrap_or("")
                )
                |> concat(")")
        }

        Variant::PathRef(ref) { return PathRef::as_string(ref) }
        Variant::VariableRef(name) { return "var@" |> concat(name) }
        Variant::Int(i) { return Int::as_string(i) }
        Variant::Float(f) { return Float::as_string(f) }
        Variant::Bool(b) { return Bool::as_string(b) }
        Variant::Unit { return "unit" }
        Variant::String(s) { return "\"" |> concat(s) |> concat("\"") }
        Variant::Closure(Closure(args, _, captures, body)) {
            val args_s = args |> values() |> join(", ")
            val captures_s = captures |> keys() |> join(", ")
            val body_s = body |> values() |> map(N::as_string) |> join("; ")
            return "|_| [_] { _ }" |> fmt(args_s, captures_s, body_s)
        }

        Variant::Add(Pair(a, b)) { return "(_ + _)" |> fmt(N::as_string(a), N::as_string(b)) }
        Variant::Subtract(Pair(a, b)) { return "(_ - _)" |> fmt(N::as_string(a), N::as_string(b)) }
        Variant::Multiply(Pair(a, b)) { return "(_ * _)" |> fmt(N::as_string(a), N::as_string(b)) }
        Variant::Divide(Pair(a, b)) { return "(_ / _)" |> fmt(N::as_string(a), N::as_string(b)) }
        Variant::Remainder(Pair(a, b)) { return "(_ % _)" |> fmt(N::as_string(a), N::as_string(b)) }
        Variant::LessThan(Pair(a, b)) { return "(_ < _)" |> fmt(N::as_string(a), N::as_string(b)) }
        Variant::GreaterThan(Pair(a, b)) { return "(_ > _)" |> fmt(N::as_string(a), N::as_string(b)) }
        Variant::LessThanEqual(Pair(a, b)) { return "(_ <= _)" |> fmt(N::as_string(a), N::as_string(b)) }
        Variant::GreaterThanEqual(Pair(a, b)) { return "(_ >= _)" |> fmt(N::as_string(a), N::as_string(b)) }
        Variant::Equal(Pair(a, b)) { return "(_ == _)" |> fmt(N::as_string(a), N::as_string(b)) }
        Variant::NotEqual(Pair(a, b)) { return "(_ != _)" |> fmt(N::as_string(a), N::as_string(b)) }
        Variant::Negate(x) { return "(- _)" |> fmt(N::as_string(x)) }
        Variant::Not(x) { return "(! _)" |> fmt(N::as_string(x)) }
        Variant::Member(Pair(obj, name)) { return "(_ ._)" |> fmt(N::as_string(obj), name) }
        Variant::Call(Invocation(called, args)) {
            val args_s = args |> values() |> map(N::as_string) |> join(", ")
            return "(_(_))" |> fmt(N::as_string(called), args_s)
        }
        Variant::PipedCall(Invocation(called, args)) {
            val args_s = args |> values() |> skip(1) 
                |> map(N::as_string) |> join(", ")
            return "(_ |> _(_))" |> fmt(
                N::as_string(args |> at(0)), N::as_string(called), args_s
            )
        }
        Variant::NamedCall(invocation) {
            return "(fun@" 
                |> concat(PathInvocation::as_string(invocation))
                |> concat(")")
        }
        Variant::StructInit(invocation) {
            return "(struct@" 
                |> concat(PathInvocation::as_string(invocation))
                |> concat(")")
        }
        Variant::EnumInit(invocation) {
            return "(enum@" 
                |> concat(PathInvocation::as_string(invocation))
                |> concat(")")
        }
        Variant::IfExpr(IfExpr(c, i, e)) {
            return "(if _ then _ else _)"
                |> fmt(N::as_string(c), N::as_string(i), N::as_string(e))
        }

        Variant::LocalVariable(LocalVariable(name, mutable, captured, type, value)) {
            return "_ __ _= _" |> fmt(
                if mutable { "mut" } else { "val" }, name,
                type |> map[N, String](|t| ": " |> concat(N::as_string(t)))
                    |> unwrap_or(""),
                if captured.value { "(captured) " } else { "" },
                N::as_string(value)
            )
        }
        Variant::Assignment(Pair(a, b)) { 
            return "_ = _" |> fmt(N::as_string(a), N::as_string(b)) 
        }
        Variant::Return(v) { return "return " |> concat(N::as_string(v)) }
        Variant::Continue { return "continue" }
        Variant::Break { return "break" }
        Variant::If(If(cond, if_body, else_body)) {
            val if_body_s = if_body |> values() |> map(N::as_string) |> join("; ")
            val else_body_s = else_body |> values() |> map(N::as_string) |> join("; ")
            return "if _ { _ } else { _ }" |> fmt(
                N::as_string(cond), if_body_s, else_body_s
            )
        }
        Variant::While(While(cond, body)) {
            return "while _ { _ }" |> fmt(
                N::as_string(cond),
                body |> values() |> map(N::as_string) |> join("; ")
            )
        }
        Variant::For(For(name, captured, seq, body)) {
            return "for __: _ { _ }" |> fmt(
                name,
                if captured.value { " (captured)" } else { "" }, 
                N::as_string(seq),
                body |> values() |> map(N::as_string) |> join("; ")
            )
        }
        Variant::Match(Match(matched, branches)) {
            val branches_s = branches |> values() 
                |> map(MatchBranch::as_string[N]) |> join(" ")
            return "match _ { _ }" |> fmt(
                N::as_string(matched), branches_s
            )
        }

        Variant::Module(path) {
            return "mod " |> concat(path |> values() |> join("::"))
        }
        Variant::Usages(usages) {
            return "use(" 
                |> concat(usages 
                    |> values()
                    |> map[Pair[String, List[String]], String](|u| u.first 
                        |> concat(" -> ") 
                        |> concat(u.second |> values() |> join("::"))
                    )
                    |> join(", ")
                )
                |> concat(")")
        }
        Variant::GlobalVariable(GlobalVariable(path, public, mutable, type, value, _)) {
            return "__ _: _ = _" |> fmt(
                if public { "pub " } else { "" },
                if mutable { "mut" } else { "val" },
                path |> values() |> join("::"),
                N::as_string(type),
                N::as_string(value)
            )
        }
        Variant::Function(Function(path, public, t_args, args, varargs, _, ret_t, body)) {
            return "_fun _[_](__)_ { _ }" |> fmt(
                if public { "pub " } else { "" },
                path |> values() |> join("::"),
                t_args |> values() |> join(", "),
                args |> values() 
                    |> map[Pair[String, N], String](
                        |a| "_: _" |> fmt(a.first, N::as_string(a.second))
                    )
                    |> join(", "),
                if varargs { "..." } else { "" },
                ret_t 
                    |> map[N, String](
                        |t| " -> " |> concat(N::as_string(t))
                    )
                    |> unwrap_or(""),
                body |> values() |> map(N::as_string) |> join("; ")
            )
        }
        Variant::ExternalFunction(ExternalFunction(path, public, t_args, args, varargs, ret_t, body)) {
            return "_ext fun _[_](__)_ = \"_\"" |> fmt(
                if public { "pub " } else { "" },
                path |> values() |> join("::"),
                t_args |> values() |> join(", "),
                args |> values() 
                    |> map[Pair[String, N], String](
                        |a| "_: _" |> fmt(a.first, N::as_string(a.second))
                    )
                    |> join(", "),
                if varargs { "..." } else { "" },
                ret_t 
                    |> map[N, String](
                        |t| " -> " |> concat(N::as_string(t))
                    )
                    |> unwrap_or(""),
                body
            )
        }
        Variant::Structure(CustomType(path, public, t_args, members)) {
            return "_struct _[_](_)" |> fmt(
                if public { "pub " } else { "" },
                path |> values() |> join("::"),
                t_args |> values() |> join(", "),
                members |> values() 
                    |> map[Pair[String, N], String](
                        |a| "_: _" |> fmt(a.first, N::as_string(a.second))
                    )
                    |> join(", ")
            )
        }
        Variant::Enumeration(CustomType(path, public, t_args, members)) {
            return "_enum _[_](_)" |> fmt(
                if public { "pub " } else { "" },
                path |> values() |> join("::"),
                t_args |> values() |> join(", "),
                members |> values() 
                    |> map[Pair[String, N], String](
                        |a| "_: _" |> fmt(a.first, N::as_string(a.second))
                    )
                    |> join(", ")
            )
        }

        Variant::Invalid { return "!INVALID!" }
        _ { return panic("ast variant not yet implemented") }
    }
}