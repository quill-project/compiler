
mod quill

use quill::token::(Token, TokenType)


pub struct Source(path: String, start: Int, end: Int)

// Creates a new source starting at 'start' and ending at 'end'.
// If the paths of the two sources differ, the path of the first
// source is used.
pub fun Source::range(start: Source, end: Source) -> Source 
    = Source(start.path, start.start, end.end)

pub fun Source::as_string(self: Source) -> String 
    = "_.._ in '_'" |> fmt(
        Int::as_string(self.start), Int::as_string(self.end), 
        self.path
    )


pub enum Message::Section(
    Error: String,
    Warning: String,
    Info: String,
    Code: Source
)

pub fun Message::Section::display(self: Message::Section, files: Map[String, String]) -> String {
    match self {
        Error(msg) { return "! error ! " |> concat(msg) }
        Warning(msg) { return "warning: " |> concat(msg) }
        Info(msg) { return "info: " |> concat(msg) }
        Code(at) { return "at " |> concat(Source::as_string(at)) }
    }
}

pub struct Message(sections: List[Message::Section])

pub fun Message::display(self: Message, files: Map[String, String]) -> String
    = self.sections 
    |> values()
    |> map[Message::Section, String](
        |s| s |> Message::Section::display(files)
    )
    |> join("\n")

// Tokenization

pub fun Message::invalid_character(invalid: String, at: Source) -> Message
    = Message(List::of(
        Message::Section::Error("Invalid character '_'" |> fmt(invalid)),
        Message::Section::Code(at)
    ))

pub fun Message::unclosed_string_literal(at: Source) -> Message
    = Message(List::of(
        Message::Section::Error("Unclosed string literal"),
        Message::Section::Code(at)
    ))

pub fun Message::invalid_hex_escape(at: Source) -> Message
    = Message(List::of(
        Message::Section::Error("Invalid hexadecimal in string escape sequence"),
        Message::Section::Code(at)
    ))

// Parsing

pub fun Message::unexpected_token(token: Token, exp_types: List[TokenType]) -> Message {
    val exp = exp_types |> slice(0, -1) |> values() 
        |> map(TokenType::as_string)
        |> join(", ") |> concat(" or ") 
        |> concat(exp_types |> at(-1) |> TokenType::as_string())
    val got = token.type |> TokenType::as_string()
    return Message(List::of(
        Message::Section::Error("Expected _, but got _" |> fmt(exp, got)),
        Message::Section::Code(token.source)
    ))
}

pub fun Message::unexpected_construct(
    token: Token, expected: String
) -> Message
    = Message(List::of(
        Message::Section::Error(
            "Expected _, but got _" 
                |> fmt(expected, TokenType::as_string(token.type))
        ),
        Message::Section::Code(token.source)
    ))

pub fun Message::non_call_pipe(at: Source) -> Message 
    = Message(List::of(
        Message::Section::Error("Pipe into non-call expression"),
        Message::Section::Code(at)
    ))

// Type checking

pub fun Message::duplicate_symbol(path: List[String], prev: Source, dupl: Source) -> Message 
    = Message(List::of(
        Message::Section::Error(
            "'_' is declared more than once"
                |> fmt(path |> values() |> join("::"))
        ),
        Message::Section::Code(dupl),
        Message::Section::Info(
            "A symbol with the path was previously defined here:"
        ),
        Message::Section::Code(prev)
    ))

pub fun Message::immutable_builtin(name: String, at: Source) -> Message
    = Message(List::of(
        Message::Section::Error(
            "Builtin type '_' may not be marked as mutable" |> fmt(name)
        ),
        Message::Section::Code(at),
        Message::Section::Info(
            "The builtin type is not behind a reference through which it could be mutated"
        ),
        Message::Section::Info(
            "'mut Box[_]' can be used to store the value behind a mutable reference" |> fmt(name)
        )
    ))

pub fun Message::type_args_builtin(name: String, at: Source) -> Message
    = Message(List::of(
        Message::Section::Error(
            "Builtin type '_' does not accept any type arguments" |> fmt(name)
        ),
        Message::Section::Code(at)
    ))

pub fun Message::no_type_args_builtin(name: String, at: Source) -> Message
    = Message(List::of(
        Message::Section::Error(
            "Builtin type '_' requires type arguments" |> fmt(name)
        ),
        Message::Section::Code(at)
    ))

pub fun Message::wrong_type_arg_c(path: List[String], exp_c: Int, got_c: Int, at: Source) -> Message
    = Message(List::of(
        Message::Section::Error(
            "Type '_' expects _ type argument_, but _ _ provided" |> fmt(
                path |> values() |> join("::"),
                exp_c |> as_string(),
                if exp_c == 1 { "" } else { "s" },
                got_c |> as_string(),
                if got_c == 1 { "was" } else { "were" }
            )
        ),
        Message::Section::Code(at)
    ))

pub fun Message::immutable_generic(at: Source, name: String) -> Message
    = Message(List::of(
        Message::Section::Error(
            "References to generic type arguments may not be marked as mutable"
        ),
        Message::Section::Code(at),
        Message::Section::Info(
            "Mutability must be defined on the type passed for '_'" |> fmt(name)
        )
    ))

pub fun Message::args_on_generic(at: Source, name: String) -> Message
    = Message(List::of(
        Message::Section::Error(
            "Type arguments may not be instantiated with type arguments"
        ),
        Message::Section::Code(at),
        Message::Section::Info(
            "Type arguments must be defined on the type passed for '_'" |> fmt(name)
        )
    ))

pub fun Message::unknown_type(path: List[String], at: Source) -> Message
    = Message(List::of(
        Message::Section::Error(
            "'_' is not a known type" |> fmt(path |> values() |> join("::"))
        ),
        Message::Section::Code(at)
    ))
