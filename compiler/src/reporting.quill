
mod quill

use quill::token::(Token, TokenType)
use quill::types::Type


val RESET_STYLE: String = "\x1B[0m"
val FG_BLACK: String = "\x1B[30m"
val FG_RED: String = "\x1B[31m"
val FG_GREEN: String = "\x1B[32m"
val FG_YELLOW: String = "\x1B[33m"
val FG_BLUE: String = "\x1B[34m"
val FG_MAGENTA: String = "\x1B[35m"
val FG_CYAN: String = "\x1B[36m"
val FG_WHITE: String = "\x1B[37m"
val FG_BRIGHT_BLACK: String = "\x1B[90m"
val FG_BRIGHT_RED: String = "\x1B[91m"
val FG_BRIGHT_GREEN: String = "\x1B[92m"
val FG_BRIGHT_YELLOW: String = "\x1B[93m"
val FG_BRIGHT_BLUE: String = "\x1B[94m"
val FG_BRIGHT_MAGENTA: String = "\x1B[95m"
val FG_BRIGHT_CYAN: String = "\x1B[96m"
val FG_BRIGHT_WHITE: String = "\x1B[97m"

val BG_BLACK: String = "\x1B[40m"
val BG_RED: String = "\x1B[41m"
val BG_GREEN: String = "\x1B[42m"
val BG_YELLOW: String = "\x1B[43m"
val BG_BLUE: String = "\x1B[44m"
val BG_MAGENTA: String = "\x1B[45m"
val BG_CYAN: String = "\x1B[46m"
val BG_WHITE: String = "\x1B[47m"
val BG_BRIGHT_BLACK: String = "\x1B[100m"
val BG_BRIGHT_RED: String = "\x1B[101m"
val BG_BRIGHT_GREEN: String = "\x1B[102m"
val BG_BRIGHT_YELLOW: String = "\x1B[103m"
val BG_BRIGHT_BLUE: String = "\x1B[104m"
val BG_BRIGHT_MAGENTA: String = "\x1B[105m"
val BG_BRIGHT_CYAN: String = "\x1B[106m"
val BG_BRIGHT_WHITE: String = "\x1B[107m"

fun line_of(file: String, offset: Int) -> Int
    = file |> slice_to(offset) |> split("\n") |> length()

fun column_of(file: String, offset: Int) -> Int {
    val line: String = file |> slice_to(offset) 
        |> split("\n") |> last() |> unwrap_or("")
    return (line |> length()) + 1
}

pub struct Source(path: String, start: Int, end: Int)

// Creates a new source starting at 'start' and ending at 'end'.
// If the paths of the two sources differ, the path of the first
// source is used.
pub fun Source::range(start: Source, end: Source) -> Source 
    = Source(start.path, start.start, end.end)

pub fun Source::as_string(self: Source) -> String 
    = "_.._ in '_'" |> fmt(
        Int::as_string(self.start), Int::as_string(self.end), 
        self.path
    )


pub enum Message::Section(
    Error: String,
    Warning: String,
    Info: String,
    Code: Source
)

val MAX_DISP_LINES: Int = 5

pub fun Message::Section::display(
    self: Message::Section, files: Map[String, String], use_color: Bool
) -> String {
    match self {
        Error(msg) { 
            if !use_color { return "! error ! " |> concat(msg) }
            return BG_BRIGHT_RED |> concat(FG_BLACK) |> concat(" error ") 
                |> concat(RESET_STYLE) |> concat(" ") 
                |> concat(FG_BRIGHT_RED) |> concat(msg)
                |> concat(RESET_STYLE)
        }
        Warning(msg) { 
            if !use_color { return "warning: " |> concat(msg) }
            return BG_BRIGHT_YELLOW |> concat(FG_BLACK) |> concat(" warning ") 
                |> concat(RESET_STYLE) |> concat(" ") 
                |> concat(FG_BRIGHT_YELLOW) |> concat(msg)
                |> concat(RESET_STYLE)
        }
        Info(msg) { 
            if !use_color { return "info: " |> concat(msg) }
            return BG_BRIGHT_BLACK |> concat(FG_WHITE) |> concat(" info ") 
                |> concat(RESET_STYLE) |> concat(" ") 
                |> concat(msg)
        }
        Code(at) { 
            val location_c: String = if use_color { FG_BRIGHT_BLACK } else { "" }
            val marked_c: String = if use_color { FG_WHITE } else { "" }
            val unmarked_c: String = if use_color { FG_BRIGHT_BLACK } else { "" }
            val content: String = files
                |> get(at.path) 
                |> unwrap_or("<file not found>")
            // one indexed
            val start_line: Int = line_of(content, at.start)
            val start_column: Int = column_of(content, at.start)
            val end_line: Int = line_of(content, at.end)
            val end_column: Int = column_of(content, at.end)
            val header: String = location_c
                |> concat("in _:_") |> fmt(at.path, Int::as_string(start_line))
            val disp_line_c: Int = Int::min(
                end_line - start_line + 1, MAX_DISP_LINES
            )
            val line_num_w: Int = Int::as_string(end_line) |> length()
            val lines: List[String] = content 
                |> split("\n") 
                |> skip(start_line - 1)
                |> take(disp_line_c)
                |> List::collect()
            val disp_line: Fun(Int) -> String = |rel_line_i| {
                // input column is zero indexed
                val is_marked: Fun(Int) -> Bool = |column_i| {
                    val unmarked_l: Bool = rel_line_i == 0 
                        && (column_i + 1) < start_column
                    val unmarked_h: Bool = rel_line_i == (disp_line_c-1)
                       && (column_i + 1) >= end_column
                    return !unmarked_l && !unmarked_h
                }
                val line: String = lines |> at(rel_line_i)
                val colored_line: String = line
                    |> indices()
                    |> map[Int, String](|column_i| {
                        val color: String = if is_marked(column_i) { marked_c } 
                            else { unmarked_c }
                        return color |> concat(line |> at(column_i))
                    })
                    |> join("")
                val arrows: String = line
                    |> indices()
                    |> map[Int, String](
                        |column_i| if is_marked(column_i) { "^" } else { " " }
                    )
                    |> join("")
                val line_num: String = Int::as_string(start_line + rel_line_i)
                    |> pad_begin(line_num_w, " ")
                val line_plh: String = " " |> repeat(line_num_w)
                return "\n __ _\n _ __" |> fmt(
                    location_c, line_num, colored_line,
                    line_plh, marked_c, arrows
                ) 
            }
            val code: String = lines 
                |> indices() 
                |> map(disp_line)
                |> join("")
            return header 
                |> concat(code)
                |> concat(RESET_STYLE)
        }
    }
}

pub struct Message(sections: List[Message::Section])

pub fun Message::display(
    self: Message, files: Map[String, String], use_color: Bool
) -> String
    = self.sections 
    |> values()
    |> map[Message::Section, String](
        |s| s |> Message::Section::display(files, use_color)
    )
    |> join("\n")

pub fun Message::is_error(self: Message) -> Bool
    = self.sections |> values() |> any(|s| {
        match s {
            Error(_) { return true }
            _ { return false }
        }
    })

// Tokenization

pub fun Message::invalid_character(invalid: String, at: Source) -> Message
    = Message(List::of(
        Message::Section::Error("Invalid character '_'" |> fmt(invalid)),
        Message::Section::Code(at)
    ))

pub fun Message::unclosed_string_literal(at: Source) -> Message
    = Message(List::of(
        Message::Section::Error("Unclosed string literal"),
        Message::Section::Code(at)
    ))

pub fun Message::invalid_hex_escape(at: Source) -> Message
    = Message(List::of(
        Message::Section::Error("Invalid hexadecimal in string escape sequence"),
        Message::Section::Code(at)
    ))

// Parsing

pub fun Message::unexpected_token(token: Token, exp_types: List[TokenType]) -> Message {
    val list_exp: String = exp_types 
        |> slice(0, -1) |> values() 
        |> map(TokenType::as_string)
        |> join(", ") |> concat(" or ") 
        |> concat(exp_types |> at(-1) |> TokenType::as_string())
    val exp: String = if 1 != (exp_types |> length()) { list_exp }
        else { TokenType::as_string(exp_types |> at(0)) }
    val got = token.type |> TokenType::as_string()
    return Message(List::of(
        Message::Section::Error("Expected _, but got _" |> fmt(exp, got)),
        Message::Section::Code(token.source)
    ))
}

pub fun Message::unexpected_construct(
    token: Token, expected: String
) -> Message
    = Message(List::of(
        Message::Section::Error(
            "Expected _, but got _" 
                |> fmt(expected, TokenType::as_string(token.type))
        ),
        Message::Section::Code(token.source)
    ))

pub fun Message::non_call_pipe(at: Source) -> Message 
    = Message(List::of(
        Message::Section::Error("Pipe into non-call expression"),
        Message::Section::Code(at)
    ))

// Type checking

pub fun Message::duplicate_symbol(path: List[String], prev: Source, dupl: Source) -> Message 
    = Message(List::of(
        Message::Section::Error(
            "'_' is declared more than once"
                |> fmt(path |> values() |> join("::"))
        ),
        Message::Section::Code(dupl),
        Message::Section::Info(
            "A symbol with the path was previously defined here:"
        ),
        Message::Section::Code(prev)
    ))

pub fun Message::immutable_builtin(name: String, at: Source) -> Message
    = Message(List::of(
        Message::Section::Error(
            "Builtin type '_' may not be marked as mutable" |> fmt(name)
        ),
        Message::Section::Code(at),
        Message::Section::Info(
            "The builtin type is not behind a reference through which it could be mutated"
        ),
        Message::Section::Info(
            "'mut Box[_]' can be used to store the value behind a mutable reference" |> fmt(name)
        )
    ))

pub fun Message::type_args_builtin(name: String, at: Source) -> Message
    = Message(List::of(
        Message::Section::Error(
            "Builtin type '_' does not accept any type arguments" |> fmt(name)
        ),
        Message::Section::Code(at)
    ))

pub fun Message::no_type_args_builtin(name: String, at: Source) -> Message
    = Message(List::of(
        Message::Section::Error(
            "Builtin type '_' requires type arguments" |> fmt(name)
        ),
        Message::Section::Code(at)
    ))

pub fun Message::wrong_type_arg_c(path: List[String], exp_c: Int, got_c: Int, at: Source) -> Message
    = Message(List::of(
        Message::Section::Error(
            "'_' expects _ type argument_, but _ _ provided" |> fmt(
                path |> values() |> join("::"),
                exp_c |> as_string(),
                if exp_c == 1 { "" } else { "s" },
                got_c |> as_string(),
                if got_c == 1 { "was" } else { "were" }
            )
        ),
        Message::Section::Code(at)
    ))

pub fun Message::immutable_generic(at: Source, name: String) -> Message
    = Message(List::of(
        Message::Section::Error(
            "References to generic type arguments may not be marked as mutable"
        ),
        Message::Section::Code(at),
        Message::Section::Info(
            "Mutability must be defined on the type passed for '_'" |> fmt(name)
        )
    ))

pub fun Message::args_on_generic(at: Source, name: String) -> Message
    = Message(List::of(
        Message::Section::Error(
            "Type arguments may not be instantiated with type arguments"
        ),
        Message::Section::Code(at),
        Message::Section::Info(
            "Type arguments must be defined on the type passed for '_'" |> fmt(name)
        )
    ))

pub fun Message::unknown_type(path: List[String], at: Source) -> Message
    = Message(List::of(
        Message::Section::Error(
            "'_' is not a known type" |> fmt(path |> values() |> join("::"))
        ),
        Message::Section::Code(at)
    ))

pub fun Message::dead_statements(at: Source) -> Message
    = Message(List::of(
        Message::Section::Warning("Statements will never be executed"),
        Message::Section::Code(at)
    ))

pub fun Message::dead_local(name: String, at: Source) -> Message
    = Message(List::of(
        Message::Section::Warning(
            "Local variable '_' is never used" |> fmt(name)
        ),
        Message::Section::Code(at)
    ))

pub fun Message::missing_return(t: Type, at: Source) -> Message
    = Message(List::of(
        Message::Section::Error(
            "Function body does not always return a value of type '_'" 
                |> fmt(t |> as_string())
        ),
        Message::Section::Code(at),
        Message::Section::Info(
            "This is only allowed for functions that don't specify a return type (or 'Unit')"
        )
    ))

pub fun Message::stray_loop_controls(at: Source) -> Message
    = Message(List::of(
        Message::Section::Error(
            "Loop control statements used outside of loop"
        ),
        Message::Section::Code(at),
        Message::Section::Info(
            "'continue' and 'break' must be used inside of 'while'- or 'for'-loops"
        )
    ))

pub fun Message::const_assignment(at: Source) -> Message
    = Message(List::of(
        Message::Section::Error("Assignment to immutable expression"),
        Message::Section::Code(at)
    ))

pub fun Message::not_iterable(t: Type, at: Source) -> Message
    = Message(List::of(
        Message::Section::Error(
            "Cannot iterate over '_'" |> fmt(t |> as_string())
        ),
        Message::Section::Code(at),
        Message::Section::Info(
            "'for'-loops must iterate over 'mut Sequence[T]'"
        )
    ))

pub fun Message::unexpected_type(exp: Type, got: Type) -> Message
    = Message(List::of(
        Message::Section::Error(
            "Expected '_', but got '_'" 
                |> fmt(exp |> as_string(), got |> as_string())
        ),
        Message::Section::Code(got.source),
        Message::Section::Info(
            "Expectation for '_' originates from here:" 
                |> fmt(exp |> as_string())
        ),
        Message::Section::Code(exp.source)
    ))

pub fun Message::unexpected_numeric(exp: Type, at: Source) -> Message
    = Message(List::of(
        Message::Section::Error(
            "Expected '_', but got a numeric type" 
                |> fmt(exp |> as_string())
        ),
        Message::Section::Code(at),
        Message::Section::Info(
            "Expectation for '_' originates from here:" 
                |> fmt(exp |> as_string())
        ),
        Message::Section::Code(exp.source)
    ))

pub fun Message::arithmetic_operands(lhs: Type, rhs: Type, at: Source) -> Message
    = Message(List::of(
        Message::Section::Error(
            "'_' and '_' are not valid operands for arithmetic expressions"
                |> fmt(lhs |> as_string(), rhs |> as_string())
        ),
        Message::Section::Code(at),
        Message::Section::Info(
            "Arithmetic expressions require their operands to be of the same number type"
        )
    ))

pub fun Message::incompatible_types(a: Type, b: Type, at: Source) -> Message
    = Message(List::of(
        Message::Section::Error(
            "'_' and '_' are not compatible, but used in the same context"
                |> fmt(a |> as_string(), b |> as_string())
        ),
        Message::Section::Code(at),
        Message::Section::Info(
            "'_' originates from here:" |> fmt(a |> as_string())
        ),
        Message::Section::Code(a.source),
        Message::Section::Info(
            "'_' originates from here:" |> fmt(b |> as_string())
        ),
        Message::Section::Code(b.source)
    ))

pub fun Message::expected_numeric(got: Type, at: Source) -> Message
    = Message(List::of(
        Message::Section::Error(
            "Expected a numeric type, but got '_'" 
                |> fmt(got |> as_string())
        ),
        Message::Section::Code(at),
        Message::Section::Info(
            "'_' originates from here:" 
                |> fmt(got |> as_string())
        ),
        Message::Section::Code(got.source)
    ))

pub fun Message::insufficient_closure_context(at: Source) -> Message
    = Message(List::of(
        Message::Section::Error(
            "Not enough context to infer closure argument types"
        ),
        Message::Section::Code(at),
        Message::Section::Info(
            "Closures need context in the form of type annotations"
                |> concat(" (be that as variable types, function argument types, ...) to infer their argument types")
        )
    ))

pub fun Message::unexpected_closure_argc(exp_c: Int, got_c: Int, at: Source) -> Message
    = Message(List::of(
        Message::Section::Error(
            "Expected a closure with _ argument_, but got _ argument_"  |> fmt(
                Int::as_string(exp_c),
                if exp_c != 1 { "s" } else { "" },
                Int::as_string(got_c),
                if got_c != 1 { "s" } else { "" }
            )
        ),
        Message::Section::Code(at)
    ))

pub fun Message::unexpected_closure(exp: Type, at: Source) -> Message
    = Message(List::of(
        Message::Section::Error(
            "Expected '_', but got a closure" 
                |> fmt(exp |> as_string())
        ),
        Message::Section::Code(at),
        Message::Section::Info(
            "Expectation for '_' originates from here:" 
                |> fmt(exp |> as_string())
        ),
        Message::Section::Code(exp.source)
    ))

pub fun Message::expected_struct(got: Type, at: Source) -> Message
    = Message(List::of(
        Message::Section::Error(
            "Expected a 'struct'-type, but got '_'" 
                |> fmt(got |> as_string())
        ),
        Message::Section::Code(at),
        Message::Section::Info(
            "'_' originates from here:" 
                |> fmt(got |> as_string())
        ),
        Message::Section::Code(got.source)
    ))

pub fun Message::symbol_private(path: List[String], at: Source, def_at: Source) -> Message
    = Message(List::of(
        Message::Section::Error(
            "'_' is declared as private but accessed from another module"
                |> fmt(path |> values() |> join("::"))
        ),
        Message::Section::Code(at),
        Message::Section::Error(
            "'_' is declared here:"
                |> fmt(path |> values() |> join("::"))
        ),
        Message::Section::Code(def_at)
    ))

pub fun Message::missing_member(path: List[String], member: String, at: Source, def_at: Source) -> Message
    = Message(List::of(
        Message::Section::Error(
            "The type '_' has no member '_'"
                |> fmt(path |> values() |> join("::"), member)
        ),
        Message::Section::Code(at),
        Message::Section::Error(
            "'_' is declared here:"
                |> fmt(path |> values() |> join("::"))
        ),
        Message::Section::Code(def_at)
    ))

pub fun Message::unexpected_t_args(thing: String, at: Source) -> Message
    = Message(List::of(
        Message::Section::Error(
            "'_' does not allow specifying type arguments" |> fmt(thing)
        ),
        Message::Section::Code(at)
    ))

pub fun Message::unknown_path(path: List[String], at: Source) -> Message
    = Message(List::of(
        Message::Section::Error(
            "'_' is not a known variable or function" 
                |> fmt(path |> values() |> join("::"))
        ),
        Message::Section::Code(at)
    ))

pub fun Message::failed_t_arg_inference(at: Source, name: String) -> Message
    = Message(List::of(
        Message::Section::Error(
            "Failed to infer generic type argument '_'" |> fmt(name)
        ),
        Message::Section::Code(at)
    ))

pub fun Message::expected_function(got: Type, at: Source) -> Message
    = Message(List::of(
        Message::Section::Error(
            "Expected a function, enum or struct, but got '_'" 
                |> fmt(got |> as_string())
        ),
        Message::Section::Code(at),
        Message::Section::Info(
            "'_' originates from here:" 
                |> fmt(got |> as_string())
        ),
        Message::Section::Code(got.source)
    ))

pub fun Message::unexpected_argc(invoked: String, exp_c: Int, got_c: Int, at: Source) -> Message
    = Message(List::of(
        Message::Section::Error(
            "'_' expects _ argument_, but got _ argument_"  |> fmt(
                invoked,
                Int::as_string(exp_c),
                if exp_c != 1 { "s" } else { "" },
                Int::as_string(got_c),
                if got_c != 1 { "s" } else { "" }
            )
        ),
        Message::Section::Code(at)
    ))

pub fun Message::unexpected_argc_varargs(invoked: String, exp_c: Int, got_c: Int, at: Source) -> Message
    = Message(List::of(
        Message::Section::Error(
            "'_' expects at least _ argument_, but got _ argument_" |> fmt(
                invoked,
                Int::as_string(exp_c),
                if exp_c != 1 { "s" } else { "" },
                Int::as_string(got_c),
                if got_c != 1 { "s" } else { "" }
            )
        ),
        Message::Section::Code(at)
    ))

pub fun Message::ambiguous_pipe(receiver: Type, candidates: Set[List[String]], at: Source) -> Message
    = Message(List::of(
        Message::Section::Error(
            "Ambiguous piped call - more than one candidate accepting '_' available"
                |> fmt(receiver |> as_string())
        ),
        Message::Section::Code(at),
        Message::Section::Info(
            "Available candidates accepting '_':\n_" |> fmt(
                receiver |> as_string(),
                candidates 
                    |> values()
                    |> map[List[String], String](|p| p
                        |> values()
                        |> join("::")
                    )
                    |> map[String, String](|p| "- '_'" |> fmt(p))
                    |> join("\n")
            )
        )
    ))

pub fun Message::unknown_pipe(receiver: Type, path: List[String], at: Source) -> Message
    = Message(List::of(
        Message::Section::Error(
            "Cannot find any functions '_' with receiver '_' in the current scope" |> fmt(
                path |> values() |> join("::"), 
                Type::as_string(receiver)
            )
        ),
        Message::Section::Code(at)
    ))

pub fun Message::va_into_non_list(got: Type, at: Source) -> Message
    = Message(List::of(
        Message::Section::Error(
            "Varargs requires list, but got '_'" |> fmt(got |> as_string())
        ),
        Message::Section::Code(at),
        Message::Section::Info(
            "Varargs requires the type to be a list to collect the arguments into."
        )
    ))

pub fun Message::missing_capture(name: String, at: Source) -> Message
    = Message(List::of(
        Message::Section::Error(
            "Pattern is missing a capture named '_' present in other patterns"
                |> fmt(name)
        ),
        Message::Section::Code(at),
        Message::Section::Info(
            "A capture present in one pattern of a branch needs to be present in all other patterns of the same branch (expept wildcards - '_')."
        )
    ))

pub fun Message::unmatched_values(vals: List[checker::Pattern], at: Source) -> Message {
    val vals_d: String = vals
        |> values()
        |> map(checker::Pattern::as_string)
        |> map[String, String](|p| "- '_'" |> fmt(p))
        |> join("\n")
    return Message(List::of(
        Message::Section::Warning(
            "Match branches don't match all possible values"
        ),
        Message::Section::Code(at),
        Message::Section::Info(
            "The following values are not handled by any branch:\n" 
                |> concat(vals_d)
        ),
        Message::Section::Info(
            "'match' statements should always provide a branch for all possible values of the matched type. You can add a default branch by using '_' as the match pattern."
        )
    ))
}

pub fun Message::missing_operator_impl(
    name: String, operands: List[Type], at: Source
) -> Message = Message(List::of(
        Message::Section::Error(
            "Operator '_' is not defined for operands _" |> fmt(
                name,
                operands |> values()
                    |> map[Type, String](|t| "'_'" |> fmt(Type::as_string(t)))
                    |> join(", ")
            )
        ),
        Message::Section::Code(at),
        Message::Section::Info(
            "To implement it, a function taking _ argument_ must be defined under the path '_::_'" |> fmt(
                operands |> length() |> as_string(),
                if (operands |> length()) != 1 { "s" } else { "" },
                operands |> at(0) 
                    |> Type::as_path()
                    |> values() |> join("::"), 
                name
            )
        )
    ))

pub fun Message::invalid_match_eq_ret(
    path: List[String], ret_t: types::Type, at: Source
) -> Message = Message(List::of(
        Message::Section::Error(
            "'match' requires '_' to have return type 'Bool', but got '_'" |> fmt(
                path |> values() |> join("::"), 
                types::Type::as_string(ret_t)
            )
        ),
        Message::Section::Code(at)
    ))

// Codegen

pub fun Message::cyclic_global_variables(
    path: List[String], at: Source
) -> Message = Message(List::of(
        Message::Section::Error(
            "The global variable '_' depends on itself"
                |> fmt(path |> values() |> join("::"))
        ),
        Message::Section::Code(at)
    ))


pub fun Message::invalid_main(path: List[String]) -> Message
    = Message(List::of(
        Message::Section::Error(
            "'_' is not a valid main function"
                |> fmt(path |> values() |> join("::"))
        ),
        Message::Section::Info(
            "The main function path needs to be the full path of a non-external function without any arguments or type arguments."
        )
    ))